<!--
 *  Bayrell Cloud OS
 *
 *  (c) Copyright 2020 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
-->

<class version="1.0"
	name="Bayrell.CloudOS.Dashboard.NodesPage" extends="Runtime.Web.Component" 
	module="Bayrell.CloudOS" model="Bayrell.CloudOS.Dashboard.NodesPageModel"
>

<use name="Runtime.Core.Message" />
<use name="Runtime.Web.LayoutModel" />
<use name="Runtime.Web.Events.MouseClickEvent" />


<script>

/**
 * Route Action
 * @return WebContainer
 */
@Route{ "uri": "/nodes/", "name": "app.dashboard.nodes" }
static async RenderContainer actionIndex(RenderContainer container)
{
	/* Set title */
	container <= layout <= title <= "Nodes";
	container <= layout <= layout_name <= "admin";
	
	/* Get services state */
	MessageRPC msg = container -> await method sendMessage
	{
		"api_name": "App.Dashboard",
		"space_name": "default",
		"method_name": "status",
		"data":
		{
		},
	};
	
	/* Create model */
	container <= layout <= page_class <= classof NodesPage;
	container <= layout <= page_model <= new NodesPageModel
	{
		"services": (msg -> method isSuccess) ? msg["response"]["services"] : null,
		"nodes": (msg -> method isSuccess) ? msg["response"]["nodes"] : null,
	};
	
	return container;
}

</script>


<style>
</style>


<template name="render">
	<div class="nodes">
	%for (int i=0; i<model.nodes.count(); i++)
	{
		Dict node = model.nodes[i];
		<div class="node" @key={ i }>
			<div class="node_name">{ _("App", "Hostname") }: { node["Description"]["Hostname"] }</div>
			<ul class="node_services">
				{ static::renderNodeTasks(layout, model, node) }
			</ul>
		</div>
	}
	</div>
</template>


<template name="renderNodeTasks" args="LayoutModel layout, NodesPageModel model, Dict node">
	%var Collection tasks = static::getNodeTasks(model, node);
	%for (int i=0; i<tasks.count(); i++)
	{
		<li class="node_service">
			{ task["ServiceName"] } [{ task["ID"] }] { _("App", "Address") }:&nbsp;
			{
				rs::join
				(
					", ",
					task["Networks"].map
					(
						string (Dict net) => net["Addresses"][0]
					)
				)
			}
		</li>
	}
</template>



<script type="frontend">

/**
 * Get node tasks
 */
pure html getNodeTasks(NodesPageModel model, Dict node)
{
	Vector tasks = new Vector();
	
	if (model.services != null)
	{
		for (int i=0; i<model.services.count(); i++)
		{
			Dict item = model.services.item(i);
			Collection Tasks = item["balancer"]["Tasks"];
			for (int j=0; j<Tasks.count(); j++)
			{
				Dict task = Tasks.item(j);
				if (task["Node"]["ID"] == node["ID"] and task["Status"]["State"] == "running")
				{
					tasks.push(task.setIm("ServiceName", item["_name"]));
				}
			}
		}
	}
	
	return tasks.toCollection();
}


/**
 * On click
 */
public void onClick(MouseClickEvent e)
{
	int pos = e.sender.params["data-index"];
	this.update("setAttr", "active", pos);
}

</script>

</class>