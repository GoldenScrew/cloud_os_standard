/*!
 *  Bayrell Cloud OS
 *
 *  (c) Copyright 2020 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Bayrell.CloudOS;

use Runtime.Core.Context;
use Runtime.Core.Driver;
use Runtime.Core.Entity;
use Runtime.Core.LambdaChain;
use Runtime.ORM.MySQL.Driver as MySQLDriver;
use Runtime.ORM.MySQL.Settings as MySQLSettings;
use Runtime.Web.Layout;
use Runtime.Web.LayoutModel;
use Runtime.Web.RenderController;
use Runtime.Web.RenderDriver;
use Runtime.Web.Route;
use Runtime.Web.RouteController;
use Runtime.Web.RouteList;
use Bayrell.CloudOS.Backend;
use Bayrell.CloudOS.Frontend;
use Bayrell.CloudOS.Routes;


static class ModuleDescription
{
	
	/**
	 * Returns module name
	 * @return string
	 */
	pure string getModuleName() => "Bayrell.CloudOS";
	
	
	
	/**
	 * Returns module name
	 * @return string
	 */
	pure string getModuleVersion() => "0.2.0";
	
	
	
	/**
	 * Returns required modules
	 * @return Dict<string>
	 */
	pure Dict<string> requiredModules() =>
	{
		"Runtime": ">=0.3",
		"Runtime.Web.App": "*",
		"Runtime.Web.Auth": "*",
		"Runtime.Web.CRUD": "*",
		
		/* Backend */
		#ifdef BACKEND then
		"Runtime.Cron": "*",
		"Runtime.Task": "*",
		#endif
	};
	
	
	
	/**
	 * Returns enities
	 */
	pure Collection<Dict> entities() =>
	[
		/* Chains */
		new LambdaChainClass{ "name": "Bayrell.CloudOS.Routes" },
		
		/* Register routes */
		new Entity{ "name": "Bayrell.CloudOS.Routes" },
		new RouteList{ "name": "Bayrell.CloudOS.MainPage" },
		new RouteList{ "name": "Bayrell.CloudOS.Design.DomainsPage" },
		new RouteList{ "name": "Bayrell.CloudOS.Design.LayersPage" },
		new RouteList{ "name": "Bayrell.CloudOS.Design.NginxFilesPage" },
		new RouteList{ "name": "Bayrell.CloudOS.Design.RoutesPage" },
		new RouteList{ "name": "Bayrell.CloudOS.Design.ServicePage" },
		new RouteList{ "name": "Bayrell.CloudOS.Design.SpacesPage" },
		new RouteList{ "name": "Bayrell.CloudOS.Design.UsersPage" },
		new RouteList{ "name": "Bayrell.CloudOS.Design.YamlFilesPage" },
		new RouteList{ "name": "Bayrell.CloudOS.Installer.InstallerPage" },
		
		
		#ifdef BACKEND then
		
		/* Register MySQL Driver */
		new Driver
		{
			"name": "Runtime.ORM.DriverInterface",
			"value": classof MySQLDriver,
		},
		
		/* Register api */
		new Entity{ "name": "Bayrell.CloudOS.API.DomainCrud" },
		new Entity{ "name": "Bayrell.CloudOS.API.LayerCrud" },
		new Entity{ "name": "Bayrell.CloudOS.API.LayerRouteCrud" },
		new Entity{ "name": "Bayrell.CloudOS.API.NginxFileCrud" },
		new Entity{ "name": "Bayrell.CloudOS.API.RouteCrud" },
		new Entity{ "name": "Bayrell.CloudOS.API.ServiceCrud" },
		new Entity{ "name": "Bayrell.CloudOS.API.SpaceCrud" },
		new Entity{ "name": "Bayrell.CloudOS.API.TopMenuCrud" },
		new Entity{ "name": "Bayrell.CloudOS.API.UserCrud" },
		new Entity{ "name": "Bayrell.CloudOS.API.YamlFiles" },
		
		/* System bus */
		new Entity{ "name": "Bayrell.CloudOS.BUS.Balancer" },
		
		/* Tasks */
		new Entity{ "name": "Bayrell.CloudOS.DockerTasks" },
		
		/* Render Chain. Pattern */
		new LambdaChain
		{
			"name": RenderDriver::RENDER_CHAIN,
			"value": "Bayrell.CloudOS.Routes::renderChainPatternDefault",
			"pos": RenderDriver::RENDER_CHAIN_RESPONSE_BEFORE,
		},
		
		/* Render Chain. Route after */
		new LambdaChain
		{
			"name": RenderDriver::RENDER_CHAIN,
			"value": "Bayrell.CloudOS.Routes::renderChainRouteAfter",
			"pos": RenderDriver::RENDER_CHAIN_CALL_ROUTE_AFTER,
		},
		
		#endif
		
		
		
		#ifdef FRONTEND then
		
		new Entity{ "name": classof Frontend },
		new Driver
		{
			"name": "App",
			"value": classof Frontend,
			"global": true,
			"params":
			{
			},
		},
		
		#endif
		
		
		#ifdef BACKEND then
		
		new Entity{ "name": classof Frontend },
		new Driver
		{
			"name": "App",
			"value": classof Backend,
			"global": true,
			"params":
			{
			},
		},
		
		#endif
	];
	
	
	
	/**
	 * Returns context settings
	 * @return Dict<string>
	 */
	pure Dict<string> appSettings(Dict env) => 
	{
		"config":
		{
			"Runtime.Web":
			{
				"f_inc": (@.env("APP_MODE", "prod") == "prod") ? 2 : rtl::utime(),
			},
			
			#ifdef BACKEND then
			
			/* Web Backend settings */
			"Runtime.Backend":
			{
				"api": true,
				"external_bus_class": "",
				"external_bus_default": true,
			},
			
			/* MySQL Settings */
			"Runtime.ORM.MySQL":
			{
				"default": new MySQLSettings
				{
					"host": env.get("MYSQL_HOST", ""),
					"username": env.get("MYSQL_USERNAME", ""),
					"password": env.get("MYSQL_PASSWORD", ""),
					"db": env.get("MYSQL_DB", ""),
				},
			},
			
			#endif
		},
		
		#ifdef BACKEND then
		
		"secrets":
		{
		}
		
		#endif
	};
	
	
}
