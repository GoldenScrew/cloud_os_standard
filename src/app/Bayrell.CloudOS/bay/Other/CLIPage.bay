/*!
 *  Bayrell Cloud Web Panel
 *
 *  (c) Copyright 2020 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace App;

use Runtime.lib;
use Runtime.MessageRPC;
use Runtime.Web.Annotations.Route;
use Runtime.Web.Annotations.RouteList;
use Runtime.Web.Annotations.RouteMiddleware;
use Runtime.Web.Events.KeyDownEvent;
use Runtime.Web.Frontend.Component;
use Runtime.Web.Frontend.LayoutModel;
use Runtime.Web.RenderContainer;
use Runtime.Web.RenderHelper;
use Runtime.Web.Response;


@RouteList{}
@RouteMiddleware{ "value": "App.User.AuthToken::checkAuthRouteMiddleware" }
class CLIPage extends Component
{
	
	/**
	 * Returns module name
	 */
	pure string moduleName() => "App";
	
	
	
	/**
	 * Route Action
	 * @return WebContainer
	 */
	@Route{ "uri": "/cli/", "name": "app.cli" }
	static async RenderContainer actionIndex(RenderContainer container)
	{
		/* Set title */
		container <= layout <= title <= "CLI page";
		container <= layout <= layout_name <= "admin";
		
		/* Create model */
		container <= layout <= page_class <= classof CLIPage;
		container <= layout <= page_model <=
		{
			"result": "",
			"text": "",
		};
		
		return container;
	}
	
	
	
	/**
	 * Component css
	 */
	pure string css(Dict<string> vars) => 
		@css{
			%output{
				position: relative;
				width: 100%;
				height: calc(100% - 30px);
				padding-bottom: 5px;
				overflow-y: scroll;
				overflow-x: hidden;
				overflow-wrap: anywhere;
				white-space: pre-wrap;
				font-family: "Courier New";
				font-size: 16px;
			}
			%input{
				padding: 6px 12px;
				width: 100%;
			}
		}
	;
	
	
	
	/**
	 * Component render
	 */
	pure html render(LayoutModel layout, Dict model, Dict params, html content) =>
		<div @class='output' @ref='div_output'>
			@raw{ model["result"] }
		</div>
		<input @class='input' @bind="text" @eventAsync:KeyDownEvent="onKeyDown" />
	;
	
	
	
	#ifdef FRONTEND then
	
	void onUpdate(bool created)
	{
		this.div_output.scrollTop = this.div_output.scrollHeight;
	}
	
	
	
	/**
	 * Click event
	 */
	async void onKeyDown(KeyDownEvent e)
	{
		if (e.keyCode == 13)
		{
			string value = e.target.value;
			
			this.updateModel
			{
				"text": "",
			};
			
			MessageRPC msg = await this.sendMessage
			{
				"api_name": "App.Dashboard",
				"space_name": "default",
				"method_name": "exec",
				"data":
				{
					"cmd": value,
				},
			};
			
			if (msg -> method isSuccess)
			{
				string content = this.model(["result"], "");
				if (content != "") content ~= "\n";
				this.updateModel
				{
					"result": content ~
						"> " ~ value ~ "\n" ~ msg["response"]["content"],
					"text": "",
				};
			}
			
		}
	}
	
	#endif
	
}