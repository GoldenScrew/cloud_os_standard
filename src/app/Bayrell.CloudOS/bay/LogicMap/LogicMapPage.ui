<!--
 *  Bayrell Cloud OS
 *
 *  (c) Copyright 2020 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
-->

<class version="1.0"
	name="Bayrell.CloudOS.LogicMap.LogicMapPage" extends="Runtime.Web.Component" 
	module="Bayrell.CloudOS" model="Bayrell.CloudOS.LogicMap.LogicMapPageModel"
>

<use name="Runtime.lib" />
<use name="Runtime.Exceptions.RuntimeException" />
<use name="Runtime.Core.Message" />
<use name="Runtime.Core.RemoteCallAnswer" />
<use name="Runtime.Web.LayoutModel" />
<use name="Runtime.Web.RenderContainer" />
<use name="Runtime.Web.RenderDriver" />
<use name="Runtime.Web.Route" />
<use name="Runtime.Web.RouteList" />
<use name="Runtime.Web.RouteMiddleware" />
<use name="Runtime.Web.Events.ChangeEvent" />
<use name="Runtime.Web.Events.MouseClickEvent" />
<use name="Runtime.Web.Events.MouseDownEvent" />
<use name="Runtime.Web.Events.MouseMoveEvent" />
<use name="Runtime.Web.Events.MouseUpEvent" />
<use name="Runtime.Web.Input.Button" component="true" />
<use name="Runtime.Web.Input.Input" component="true" />
<use name="Runtime.Web.Input.Label" component="true" />
<use name="Runtime.Web.Input.Select" component="true" />
<use name="Runtime.Web.Input.SelectText" component="true" />
<use name="Runtime.Web.Input.TextArea" component="true" />
<use name="Runtime.Web.Table.TableModel" />
<use name="Bayrell.CloudOS.LogicMap.Box" component="true" />
<use name="Bayrell.CloudOS.LogicMap.BoxModel" />
<use name="Bayrell.CloudOS.LogicMap.DragAndDropEvent" />
<use name="Bayrell.CloudOS.LogicMap.LogicMapPage" />
<use name="Bayrell.CloudOS.LogicMap.LogicMapPageModel" />


<script>

/**
 * Route Action
 * @return RenderContainer
 */
@Route{ "uri": "/design/logic_map/", "name": "app.design.logic_map" }
@RouteMiddleware{ "value": "Runtime.Web.Auth.AuthFrontend::checkAuthMiddleware" }
static async RenderContainer actionIndex(RenderContainer container)
{
	LogicMapPageModel page_model = new LogicMapPageModel{};
	
	/* Send request */
	RemoteCallAnswer answer = await RenderDriver::remoteBusCall
	(
		{
			"object_name": "Bayrell.CloudOS.LogicMap",
			"interface_name": "default",
			"method_name": "status",
		},
		container
	);
	
	/* Throw exception */
	if (not answer.isSuccess())
	{
		throw new RuntimeException(answer.error_message, answer.error_code);
	}
	
	Dict response = answer.response;
	
	/* Get layers spaces */
	Collection<Dict> layers_spaces = response["layers_spaces"] |> default Collection [];
	
	/* Get services */
	page_model <= services <=
		response
		|> attr "services"
		|> default Collection []
		|> .map
		(
			BoxModel (Dict item) => new BoxModel{ "kind": "service", "item": item, "y": item["logic_map_pos_y"] }
		)
	;
	
	/* Get spaces */
	page_model <= spaces <=
		response
		|> attr "spaces"
		|> default Collection []
		|> .map
		(
			BoxModel (Dict item) => new BoxModel{ "kind": "space", "item": item, "y": item["logic_map_pos_y"] }
		)
	;
	
	/* Get layers */
	Collection spaces = response |> attr "spaces" |> default Collection [];
	Collection services = response |> attr "services" |> default Collection [];
	page_model <= layers <=
		response
		|> attr "layers"
		|> default Collection []
		|> .map
		(
			BoxModel (Dict item) use (layers_spaces, services, spaces)
			{
				Dict service = services.findItem( lib::equalAttr("service_id", item["service_id"]) );
				
				/* Get layer spaces */
				Collection layer_spaces = [];
				for (int i=0; i<layers_spaces.count(); i++)
				{
					Dict layer_space = layers_spaces[i];
					int layer_id = layer_space["layer_id"] |> default int 0;
					if (layer_id != item["layer_id"]) continue;
					int space_id = layer_space["space_id"] |> default int 0;
					string uri = layer_space["uri"] |> default string "";
					Dict space = spaces.findItem( lib::equalAttr("space_id", space_id) );
					layer_spaces = layer_spaces.pushIm
					{
						"item": space,
						"uri": uri,
					};
				}
				
				return new BoxModel
				{
					"kind": "layer",
					"item": item,
					"service": service,
					"spaces": layer_spaces,
					"y": item["logic_map_pos_y"]
				};
			}
		)
	;
	
	/* Set title */
	container <= layout <= title <= "Logic Map";
	container <= layout <= layout_name <= "admin";
	
	/* Set model */
	container <= layout <= page_class <= classof LogicMapPage;
	container <= layout <= page_model <= page_model;
	
	return [ container ];
}

</script>



<style>
%box_wrap{
	position: relative;
    display: flex;
    align-items: stretch;
	min-height: 100%;
}
%box_items{
	position: relative;
	width: 33%;
	margin: 10px;
}
%box_items--spaces{
	margin-left: 0px;
}
%box_items--services{
	margin-right: 0px;
}
</style>



<template name="render">
	<div class='buttons'>
		<Button @event:MouseClickEvent="onSavePos">Save positions</Button>
	</div>
	<div class='box_wrap'>
		<div class='box_items box_items--services'>
			%for (int i=0; i<model.services.count(); i++)
			{
				%var BoxModel box = model.services[i];
				<Box
					@key={ "service_" ~ box["item", "service_id"] }
					@bind=[ "services", i ]
					@event:DragAndDropEvent="onBoxEvent"
				/>
			}
		</div>
		<div class='box_items box_items--layers'>
			%for (int i=0; i<model.layers.count(); i++)
			{
				%var BoxModel box = model.layers[i];
				<Box
					@key={ "layer_" ~ box["item", "layer_id"] }
					@bind=[ "layers", i ]
					@event:DragAndDropEvent="onBoxEvent"
				/>
			}
		</div>
		<div class='box_items box_items--spaces'>
			%for (int i=0; i<model.spaces.count(); i++)
			{
				%var BoxModel box = model.spaces[i];
				<Box
					@key={ "space_" ~ box["item", "space_id"] }
					@bind=[ "spaces", i ]
					@event:DragAndDropEvent="onBoxEvent"
				/>
			}
		</div>
	</div>
</template>



<script type="frontend">

Box current_box = null;


/**
 * Created component
 */
public void onCreated()
{
	this.driver.registerGlobalListener(classof MouseMoveEvent, this.getObjectName(), "onMouseMove");
	this.driver.registerGlobalListener(classof MouseUpEvent, this.getObjectName(), "onMouseUp");
}



/**
 * On mouse move
 */
public void onBoxEvent(Message<DragAndDropEvent> msg)
{
	DragAndDropEvent e = msg.data;
	if (e.kind == DragAndDropEvent::PICK_UP)
	{
		this.current_box = e.obj;
	}
}



/**
 * On mouse up
 */
public void onMouseUp(Message<MouseUpEvent> msg)
{
	if (this.current_box != null)
	{
		this.current_box.update("stopMove");
		this.current_box = null;
	}
}



/**
 * On mouse move
 */
public void onMouseMove(Message<MouseMoveEvent> msg)
{
	MouseDownEvent e = msg.data;
	if (this.current_box != null)
	{
		var p = this.current_box.box.parentElement;
		int top = this.getOffsetTop(p);
		int y = e.pageY - top;
		if (y < 0) y = 0;
		this.current_box.update("setPosY", y);
	}
}



/**
 * Returns offset top
 */
public int getOffsetTop(var e)
{
	var top = 0;
	while (e != null)
	{
		top += e.offsetTop;
		e = e.parentElement;
	}
	return top;
}



/**
 * Save positions
 */
public async void onSavePos(Message<MouseClickEvent> msg)
{
	Dict data = {};
	
	LogicMapPageModel page_model = this.model();
	
	/* Push services */
	data <= services <= page_model.services
		|> .map
		(
			Dict (BoxModel box) =>
			{
				"service_id": box["item", "service_id"],
				"y": box.y
			}
		)
	;
	
	/* Push layers */
	data <= layers <= page_model.layers
		|> .map
		(
			Dict (BoxModel box) =>
			{
				"layer_id": box["item", "layer_id"],
				"y": box.y
			}
		)
	;
	
	/* Push spaces */
	data <= spaces <= page_model.spaces
		|> .map
		(
			Dict (BoxModel box) =>
			{
				"space_id": box["item", "space_id"],
				"y": box.y
			}
		)
	;
	
	/* Send request */
	RemoteCallAnswer answer = await RenderDriver::remoteBusCall
	(
		{
			"object_name": "Bayrell.CloudOS.LogicMap",
			"interface_name": "default",
			"method_name": "savePos",
			"data": data,
		}
	);
	
	log(answer);
}

</script>


</class>