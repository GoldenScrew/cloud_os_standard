<!--
 *  Bayrell Cloud OS
 *
 *  (c) Copyright 2020 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
-->

<class version="1.0"
	name="Bayrell.CloudOS.Page.YamlFilesPage" extends="Runtime.Web.CRUD.CrudPage" 
	module="Bayrell.CloudOS" model="Runtime.Dict"
>

<use name="Runtime.lib" />
<use name="Runtime.Exceptions.RuntimeException" />
<use name="Runtime.Web.Message" />
<use name="Runtime.Web.App.LayoutModel" />
<use name="Runtime.Web.App.RemoteCallAnswer" />
<use name="Runtime.Web.App.RenderContainer" />
<use name="Runtime.Web.App.Route" />
<use name="Runtime.Web.App.RouteList" />
<use name="Runtime.Web.App.RouteMiddleware" />
<use name="Runtime.Web.App.WebApp" />
<use name="Runtime.Web.Events.MouseClickEvent" />
<use name="Runtime.Web.CRUD.CrudPage" component="true" />
<use name="Runtime.Web.CRUD.CrudPageModel" />
<use name="Runtime.Web.CRUD.FieldInfo" />
<use name="Runtime.Web.Dialog.DialogEvent" />
<use name="Runtime.Web.Dialog.DialogModel" />
<use name="Runtime.Web.Input.Input" component="true" />
<use name="Runtime.Web.Input.Label" component="true" />
<use name="Runtime.Web.Input.Select" component="true" />
<use name="Runtime.Web.Input.SelectText" component="true" />
<use name="Runtime.Web.Input.TextArea" component="true" />
<use name="Runtime.Web.Table.TableModel" />



<script>

/**
 * Route Action
 * @return RenderContainer
 */
@Route{ "uri": "/yaml_files/", "name": "app.admin.yaml_files" }
static async RenderContainer actionIndex(RenderContainer container) => [
	container
		
		/* Set title */
		|> lib::setAttr(["layout", "title"], "Yaml Files")
		|> lib::setAttr(["layout", "layout_name"], "admin")
		
		/* Set model */
		|> lib::setAttr(["layout", "page_class"], classof YamlFilesPage)
		|> lib::setAttr(["layout", "page_model"],
			new Dict
			{
				"stacks": [],
				"current_file": "",
				"content": "",
				"dialog": new DialogModel{},
				"create_dialog": new DialogModel{},
				"edit_dialog": new DialogModel{},
				"delete_dialog": new DialogModel{},
				"create_stack_name": "",
				"create_file_name": "",
				"edit_file_name": "",
				"current_dialog_file": "",
				"edit_stack": false,
			}
		)
		
		/* Get yaml files */
		|> await lib::applyAsync
		(
			async RenderContainer (RenderContainer container)
			{
				/* Remote call */
				RemoteCallAnswer answer = await container.externalBusCall
				{
					"object_name": "Bayrell.CloudOS.YamlFiles",
					"interface_name": "default",
					"method_name": "getFiles",
				};
				
				if (not answer.isSuccess()) return container;
				
				container <= layout <= page_model <= stacks <= answer.response;
				
				return container;
			}
		)
];

</script>


<style>
.left-panel, .right-content{
	display: inline-block;
	vertical-align: top;
}
.left-panel{
	width: 200px;
	padding-right: 10px;
}
.right-content{
	width: calc(100% - 200px);
}
.items{
	padding-top: 10px;
}
.item{
	padding-bottom: 10px;
}
.item:last-child{
	padding-bottom: 0px;
}
.label{
	padding-right: 5px;
	font-weight: bold;
	padding-bottom: 10px;
	user-select: none;
}
.stack-name, .stack-icons{
	display: inline-block;
	vertical-align: top;
}
.stack-name{
	width: calc(100% - 40px);
}
.stack-icons{
	display: none;
	width: 40px;
	cursor: pointer;
}
.stack-icons .far{
	display: inline-block;
	margin-left: 5px;
}
.label:hover .stack-icons{
	display: inline-block;
}
.files{
	padding-left: 10px;
}
.file{
	padding: 5px;
	cursor: pointer;
	user-select: none;
}
.file:hover{
	background-color: #eee;
}
.file.active{
	background-color: ${ vars["colors", "primary", "color"] };
	color: ${ vars["colors", "primary", "text"] };
}
.file-name, .file-icons{
	display: inline-block;
	vertical-align: top;
}
.file-name{
	width: calc(100% - 40px);
}
.file-icons{
	display: none;
	width: 40px;
}
.file:hover .file-icons{
	display: inline-block;
}
.file-icons .far{
	display: inline-block;
	margin-left: 5px;
}
.right-content %(TextArea)input{
	width: calc(100% - 20px);
	height: calc(100% - 20px);
	outline: 0;
}
.content_file_name{
	padding-bottom: 5px;
	min-height: 35px;
}
.content_file_name %(Button)button{
	margin-left: 10px;
}
.form-label{
	font-weight: bold;
	text-align: center;
	padding-bottom: 10px;
}
.form-row{
	padding-bottom: 10px;
}
.form-row:last-child{
	padding-bottom: 0px;
}
.form-row label{
	display: block;
	padding-bottom: 5px;
	font-weight: bold;
}
</style>


<template name="render">
	
	<div class='left-panel'>
		<Button @event:MouseClickEvent="onAddFile">Add file</Button>
		<div class='items'>
		%var Dict stacks = model["stacks"] |> default Collection [];
		%for (int i=0; i<stacks.count(); i++)
		{
			%var Dict stack = stacks[i];
			<div class='item'>
				<div class='label'>
					%var Dict attrs =
					{
						"stack-name": stack["name"],
					};
					<span class='stack-name'>{ stack["name"] }</span>
					<span class='stack-icons'>
						<i class="far fa-edit" @event:MouseClickEvent="onEditStack" ...attrs></i>
						<i class="far fa-trash-alt" @event:MouseClickEvent="onDeleteStack" ...attrs></i>
					</span>
				</div>
				
				%var Dict files = stack["files"] |> default Collection [];
				<div class='files'>
				%for (int j=0; j<files.count(); j++)
				{
					%var string checked = "";
					%if (static::isChecked(stack["name"], files[j], model["current_file"]))
					{
						%var checked = "active";
					}
					%var Dict attrs =
					{
						"stack-name": stack["name"],
						"file-name": files[j],
					};
					<div class='file' class={ checked } @event:MouseClickEvent="onOpenFile"
						...attrs
					>
						<span class='file-name'>{ files[j] }</span>
						<span class='file-icons'>
							<i class="far fa-edit" @event:MouseClickEvent="onEditFile" ...attrs></i>
							<i class="far fa-trash-alt" @event:MouseClickEvent="onDeleteFile" ...attrs></i>
						</span>
					</div>
				}
				</div>
			</div>
		}
		</div>
	</div>
	
	<div class='right-content'>
		<div class='content_file_name'>
			{ model["current_file"] }
			%if (model["current_file"] != "")
			{
				<Button @event:MouseClickEvent="onSaveFile">Save</Button>
				%if (static::canCompose(model["current_file"]))
				{
					<Button @event:MouseClickEvent="onCompose">Compose</Button>
				}
			}
		</div>
		<TextArea @name="content" />
	</div>
	
	<Dialog @name="dialog" />
	<Dialog @name="create_dialog" auto_hide={ false }
		style={ DialogModel::STYLE_CONTENT } @event:DialogEvent="onDialogEvent"
	>
		<div class='form-row'>
			<label>Stack name:</label>
			<Input @bind="create_stack_name" />
		</div>
		<div class='form-row'>
			<label>File name:</label>
			<Input @bind="create_file_name" />
		</div>
	</Dialog>
	<Dialog @name="edit_dialog" auto_hide={ false }
		style={ DialogModel::STYLE_CONTENT } @event:DialogEvent="onDialogEvent"
	>
		<div class='form-row'>
			%if (model["edit_stack"])
			{
				<div class='form-label'>Rename stack</div>
				<label>Stack name:</label>
			}
			%else
			{
				<div class='form-label'>Rename file</div>
				<label>File name:</label>
			}
			<Input @bind="edit_file_name" />
		</div>
	</Dialog>
	<Dialog @name="delete_dialog" auto_hide={ false } @event:DialogEvent="onDialogEvent" />
	
</template>



<script>

/**
 * Can compose
 */
pure bool canCompose(string file_name) =>
	rs::extname(file_name) == "yaml"
;


/**
 * Returns true if checked
 */
pure bool isChecked(string stack_name, string file_name, string current_file) =>
	current_file == stack_name ~ "/" ~ file_name
;



/* Reload file list */
async void reloadFileList()
{
	/* Remote call */
	RemoteCallAnswer answer = await WebApp::externalBusCall
	{
		"object_name": "Bayrell.CloudOS.YamlFiles",
		"interface_name": "default",
		"method_name": "getFiles",
	};
	
	if (answer.isSuccess())
	{
		this.update("copy", { "stacks": answer.response });
	}
}



/* Add file */
async void onAddFile(Message<MouseClickEvent> msg)
{
	this.update("copy", { "create_stack_name": "", "create_file_name": "" });
	this.create_dialog.update("show");
}



/* Edit file name */
async void onEditFile(Message<MouseClickEvent> msg)
{
	msg.cancel();
	
	string stack_name = msg.sender.params["stack-name"];
	string file_name = msg.sender.params["file-name"];
	string current_dialog_file = stack_name ~ "/" ~ file_name;
	this.update
	(
		"copy",
		{ "current_dialog_file": current_dialog_file, "edit_file_name": file_name, "edit_stack": false }
	);
	this.edit_dialog.update("show");
}



/* Delete file name */
async void onDeleteFile(Message<MouseClickEvent> msg)
{
	msg.cancel();
	
	string stack_name = msg.sender.params["stack-name"];
	string file_name = msg.sender.params["file-name"];
	string current_dialog_file = stack_name ~ "/" ~ file_name;
	this.update("copy", { "current_dialog_file": current_dialog_file, "edit_stack": false });
	this.delete_dialog.update("confirm", "Do you realy want to delete file '" ~ current_dialog_file ~ "' ?");
}



/* Edit stack */
async void onEditStack(Message<MouseClickEvent> msg)
{
	msg.cancel();
	
	string stack_name = msg.sender.params["stack-name"];
	this.update("copy", { "current_dialog_file": stack_name, "edit_file_name": stack_name, "edit_stack": true });
	this.edit_dialog.update("show");
}


/* Delete stack */
async void onDeleteStack(Message<MouseClickEvent> msg)
{
	msg.cancel();
	
	string stack_name = msg.sender.params["stack-name"];
	this.update("copy", { "current_dialog_file": stack_name, "edit_stack": true });
	this.delete_dialog.update("confirm", "Do you realy want to delete stack '" ~ stack_name ~ "' ?");
}



/* Dialog event */
async void onDialogEvent(Message<DialogEvent> msg)
{
	Dict model = this.model();
	
	/* Create file */
	if (msg.sender == this.create_dialog)
	{
		if (msg.data.button_result == "ok")
		{
			string create_stack_name = model["create_stack_name"];
			string create_file_name = model["create_file_name"];
			
			if (create_stack_name == "" or create_file_name == "")
			{
				this.create_dialog.update("copy", { "error_message": "Stack name or file name is empty" });
			}
			else
			{
				this.create_dialog.update("copy", { "message": "Wait for file creation" });
				this.create_dialog.update("copy", { "error_message": "" });
				
				/* Call api */
				RemoteCallAnswer answer = await WebApp::externalBusCall
				{
					"object_name": "Bayrell.CloudOS.YamlFiles",
					"interface_name": "default",
					"method_name": "createFile",
					"data":
					{
						"stack_name": create_stack_name,
						"file_name": create_file_name,
					},
				};
				
				if (answer.isSuccess())
				{
					await this.reloadFileList();
					this.create_dialog.update("hide");
				}
				else
				{
					this.create_dialog.update("copy", { "message": "" });
					this.create_dialog.update("copy", { "error_message": answer.error_message });
				}
				
			}
		}
		else if (msg.data.button_result == "cancel")
		{
			this.create_dialog.update("hide");
		}
	}
	
	/* Edit stack or file */
	else if (msg.sender == this.edit_dialog)
	{
		if (msg.data.button_result == "ok")
		{
			string current_file = model["current_file"];
			string edit_file_name = model["edit_file_name"];
			string current_dialog_file = model["current_dialog_file"];
			bool edit_stack = model["edit_stack"];
			
			/* Edit stack */
			if (edit_stack)
			{
				this.edit_dialog.update("copy", { "message": "Wait for file rename" });
				this.edit_dialog.update("copy", { "error_message": "" });
				
				/* Call api */
				RemoteCallAnswer answer = await WebApp::externalBusCall
				{
					"object_name": "Bayrell.CloudOS.YamlFiles",
					"interface_name": "default",
					"method_name": "editStack",
					"data":
					{
						"stack_name": current_dialog_file,
						"stack_name_new": edit_file_name,
					},
				};
				
				if (answer.isSuccess())
				{
					await this.reloadFileList();
					this.edit_dialog.update("hide");
				}
				else
				{
					this.edit_dialog.update("copy", { "message": "" });
					this.edit_dialog.update("copy", { "error_message": answer.error_message });
				}
			}
			
			/* Edit file */
			else
			{
				Collection arr = rs::split("/", current_dialog_file);
				string current_stack_name = arr[0];
				string current_file_name = arr[1];
		
				this.edit_dialog.update("copy", { "message": "Wait for file rename" });
				this.edit_dialog.update("copy", { "error_message": "" });
				
				/* Call api */
				RemoteCallAnswer answer = await WebApp::externalBusCall
				{
					"object_name": "Bayrell.CloudOS.YamlFiles",
					"interface_name": "default",
					"method_name": "renameFile",
					"data":
					{
						"stack_name": current_stack_name,
						"file_name": current_file_name,
						"file_name_new": edit_file_name,
					},
				};
				
				if (answer.isSuccess())
				{
					await this.reloadFileList();
					if (current_file == current_dialog_file)
					{
						this.update("copy", { "current_file": current_stack_name ~ "/" ~ edit_file_name });
					}
					this.edit_dialog.update("hide");
				}
				else
				{
					this.edit_dialog.update("copy", { "message": "" });
					this.edit_dialog.update("copy", { "error_message": answer.error_message });
				}
			}
		}
		else if (msg.data.button_result == "cancel")
		{
			this.edit_dialog.update("hide");
		}
	}
	
	/* Delete stack or file */
	else if (msg.sender == this.delete_dialog)
	{
		if (msg.data.button_result == "ok")
		{
			string current_file = model["current_file"];
			string current_dialog_file = model["current_dialog_file"];
			bool edit_stack = model["edit_stack"];
			
			if (edit_stack)
			{
				this.delete_dialog.update("copy", { "message": "Wait for file rename" });
				this.delete_dialog.update("copy", { "error_message": "" });
				
				/* Call api */
				RemoteCallAnswer answer = await WebApp::externalBusCall
				{
					"object_name": "Bayrell.CloudOS.YamlFiles",
					"interface_name": "default",
					"method_name": "deleteStack",
					"data":
					{
						"stack_name": current_dialog_file,
					},
				};
				
				if (answer.isSuccess())
				{
					await this.reloadFileList();
					this.delete_dialog.update("hide");
				}
				else
				{
					this.delete_dialog.update("copy", { "message": "" });
					this.delete_dialog.update("copy", { "error_message": answer.error_message });
				}
			}
			else
			{
				Collection arr = rs::split("/", current_dialog_file);
				string current_stack_name = arr[0];
				string current_file_name = arr[1];
				
				this.delete_dialog.update("copy", { "message": "Wait for file rename" });
				this.delete_dialog.update("copy", { "error_message": "" });
				
				/* Call api */
				RemoteCallAnswer answer = await WebApp::externalBusCall
				{
					"object_name": "Bayrell.CloudOS.YamlFiles",
					"interface_name": "default",
					"method_name": "deleteFile",
					"data":
					{
						"stack_name": current_stack_name,
						"file_name": current_file_name,
					},
				};
				
				if (answer.isSuccess())
				{
					await this.reloadFileList();
					if (current_file == current_dialog_file)
					{
						this.update("copy", { "current_file": "", "content": "" });
					}
					this.delete_dialog.update("hide");
				}
				else
				{
					this.delete_dialog.update("copy", { "message": "" });
					this.delete_dialog.update("copy", { "error_message": answer.error_message });
				}
			}
		}
		else if (msg.data.button_result == "cancel")
		{
			this.delete_dialog.update("hide");
		}
	}
}



/* Open file */
async void onOpenFile(Message<MouseClickEvent> msg)
{
	string stack_name = msg.sender.params["stack-name"];
	string file_name = msg.sender.params["file-name"];
	
	/* Call api */
	RemoteCallAnswer answer = await WebApp::externalBusCall
	{
		"object_name": "Bayrell.CloudOS.YamlFiles",
		"interface_name": "default",
		"method_name": "openFile",
		"data":
		{
			"stack_name": stack_name,
			"file_name": file_name,
		},
	};
	
	if (answer.isSuccess())
	{
		this.updateModel("setIm", ["current_file"], stack_name ~ "/" ~ file_name);
		this.updateModel("setIm", ["content"], answer.response["content"]);
	}
}



/* Save file */
async void onSaveFile(Message<MouseClickEvent> msg)
{
	Dict model = this.model();
	string current_file = model["current_file"];
	Collection arr = rs::split("/", current_file);
	string stack_name = arr[0];
	string file_name = arr[1];
	string content = model["content"];
	
	this.dialog.update("alert", "Process save file '" ~ model["current_file"] ~ "'");
	
	/* Call api */
	RemoteCallAnswer answer = await WebApp::externalBusCall
	{
		"object_name": "Bayrell.CloudOS.YamlFiles",
		"interface_name": "default",
		"method_name": "saveFile",
		"data":
		{
			"stack_name": stack_name,
			"file_name": file_name,
			"content": content,
		},
	};
	
	if (answer.isSuccess())
	{
		this.dialog.update("alert", "File '" ~ model["current_file"] ~ "' saved");
	}
	else
	{
		this.dialog.update("alert", "Error: " ~ answer.error_message);
	}
}



/* Compose */
async void onCompose(Message<MouseClickEvent> msg)
{
	Dict model = this.model();
	string current_file = model["current_file"];
	Collection arr = rs::split("/", current_file);
	string stack_name = arr[0];
	string file_name = arr[1];
	
	this.dialog.update("alert", "Process compose file '" ~ model["current_file"] ~ "'.\n\nPlease wait.");
	
	/* Call api */
	RemoteCallAnswer answer = await WebApp::externalBusCall
	{
		"object_name": "Bayrell.CloudOS.YamlFiles",
		"interface_name": "default",
		"method_name": "compose",
		"data":
		{
			"stack_name": stack_name,
			"file_name": file_name,
		},
	};
	
	if (answer.isSuccess())
	{
		this.dialog.update("alert", "Process compose file '" ~ model["current_file"] ~ "'.\n\n" ~
			answer.success_message);
	}
	else
	{
		this.dialog.update("alert", "Process compose file '" ~ model["current_file"] ~ "'.\n\n" ~
			"Error: " ~ answer.error_message);
	}
}


</script>


</class>