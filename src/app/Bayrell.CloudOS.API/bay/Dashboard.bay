/*!
 *  Bayrell Cloud OS
 *
 *  (c) Copyright 2020 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Bayrell.CloudOS.API;

use Runtime.rtl;
use Runtime.lib;
use Runtime.Core.ApiException;
use Runtime.Core.RemoteCallAnswer;
use Runtime.Core.RemoteCallRequest;
use Runtime.ORM.CursorInterface as Cursor;
use Runtime.ORM.DriverInterface as ORMDriver;
use Runtime.ORM.QueryBuilder;
use Runtime.Web.Backend.ApiList;
use Runtime.Web.Backend.ApiMethod;
use Bayrell.CloudOS.API.DockerLib;


@ApiList{ "object_name": "Bayrell.CloudOS.Dashboard", "interface_name": "default" }
class Dashboard
{
	
	
	/**
	 * Status api
	 */
	@ApiMethod{ "method_name": "status" }
	static async list statusAction(RemoteCallRequest request, RemoteCallAnswer answer)
	{
		Cursor cursor = null;
		ORMDriver orm = @.getDriver(classof ORMDriver);
		
		string s = await DockerLib::dockerApi("/nodes");
		Dict nodes = s
			|> rtl::json_decode
			|> lib::sort
			(
				int (Dict a, Dict b) => a["Description", "Hostname"] > b["Description", "Hostname"]
			)
		;
		
		QueryBuilder q = new QueryBuilder()
			.select("services")
			.fields([
				"id", "service_id", "_name", "_image", "enable", "timestamp", "balancer",
			])
			.order([ ["_name", "asc"] ])
			.where
			{
				"is_deleted": 0,
			}
		;
		
		Cursor cursor = await orm.execute(q);
		Dict services = await cursor.fetchAll();
		services = services.map
		(
			Dict (Dict item) => item.setIm( "balancer", rtl::json_decode(item["balancer"]) )
		);
		await cursor.close();
		
		/* Set answer */
		answer = answer::success
		(
			answer,
			{
				"nodes": nodes,
				"services": services,
			}
		)
		
		return [ request, answer ];
	}
	
	
	
	/**
	 * Execute shell command
	 */
	@ApiMethod{ "method_name": "exec" }
	static async list execAction(RemoteCallRequest request, RemoteCallAnswer answer)
	{
		string content = await DockerLib::exec("sudo " ~ request["data", "cmd"] ~ " 2>&1");
		
		/* Set answer */
		answer = answer::success(answer, { "content": content });
		
		return [ request, answer ];
	}
	
}