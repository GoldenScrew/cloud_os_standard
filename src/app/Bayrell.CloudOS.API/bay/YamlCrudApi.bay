/*!
 *  Bayrell Cloud OS
 *
 *  (c) Copyright 2020 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace App.Yaml;

use Runtime.lib;
use Runtime.MessageRPC;
use Runtime.Monad;
use Runtime.RuntimeConstant;
use Runtime.RuntimeUtils;
use Runtime.Exceptions.ApiException;
use Runtime.Exceptions.RuntimeException;
use Runtime.ORM.Cursor;
use Runtime.ORM.ORMProviderInterface;
use Runtime.Web.Annotations.ApiList;
use Runtime.Web.Annotations.ApiMethod;
use Runtime.Web.Annotations.ApiMiddleware;
use Runtime.Web.Annotations.Route;
use Runtime.Web.Annotations.RouteList;
use Runtime.Web.CRUD.CrudApi;
use Runtime.Web.CRUD.CrudInterface;
use Runtime.Web.CRUD.FieldInfo;
use Runtime.Web.Cookie;
use Runtime.Web.JsonResponse;
use Runtime.Web.RenderContainer;
use Runtime.Web.Response;
use App.Yaml.YamlPageModel;
use App.DockerLib;
use App.SyncDockerServicesTask;


@ApiList{ "api_name": "App.Yaml", "space_name": classof CrudInterface }
@ApiMiddleware{ "value": "App.User.AuthToken::checkAuthApiMiddleware" }
class YamlCrudApi extends CrudApi implements CrudInterface
{
	
	#ifdef BACKEND then
	
	
	/**
	 * Returns crud model name
	 */
	pure string crudModelName() => classof YamlPageModel;
	
	
	
	/**
	 * Returns crud table name
	 */
	pure string crudTableName() => "docker_yaml";
	
	
	
	/**
	 * Api init
	 */
	pure async CrudApi apiInit(CrudApi api) => api;
	
	
	
	/**
	 * Convert item from database
	 */
	pure fn<Dict, Dict> fromDatabase(CrudApi api) =>
		Dict (Dict item) => item
	;
	
	
	
	/**
	 * Convert item to database
	 */
	pure fn<Dict, Dict> toDatabase(CrudApi api) =>
		Dict (Dict item) => item
	;
	
	
	
	/**
	 * Process item
	 */
	pure fn<var, Dict> processItem(CrudApi api, Dict filter_item, Dict new_item, Dict old_item = null)
		=> filter_item
	;
	
	
	
	/**
	 * Search
	 */
	@ApiMethod{ "method_name": "search" }
	static async MessageRPC search(MessageRPC msg)
	{
		return await parent::search(msg);
	}
	
	
	
	/**
	 * Get by ID
	 */
	@ApiMethod{ "method_name": "findItem" }
	static async MessageRPC findItem(MessageRPC msg)
	{
		return await parent::findItem(msg);
	}
	
	
	
	/**
	 * Create
	 */
	@ApiMethod{ "method_name": "create" }
	static async MessageRPC create(MessageRPC msg)
	{
		return await parent::create(msg);
	}
	
	
	
	/**
	 * Update
	 */
	@ApiMethod{ "method_name": "update" }
	static async MessageRPC update(MessageRPC msg)
	{
		return await parent::update(msg);
	}
	
	
	
	/**
	 * Delete
	 */
	@ApiMethod{ "method_name": "delete" }
	static async MessageRPC delete(MessageRPC msg)
	{
		return await parent::delete(msg);
	}
	
	
	
	/**
	 * Compose
	 */
	@ApiMethod{ "method_name": "compose" }
	static async MessageRPC compose(MessageRPC msg)
	{
		Dict item = msg["data"]["item"];
		CrudApi api = static::newInstance
		{
			"action": "compose",
			"msg": msg,
			"item": item,
		};
		
		/* Update in database */
		msg = await parent::update(msg);
		if (msg.code < RuntimeConstant::ERROR_OK)
		{
			return msg;
		}
		
		/* Get updated item */
		Dict row = msg["response"]["item"];
		
		/* Save yaml file */
		string name = row["name"];
		string stack = row["stack"];
		string content = row["content"];
		string dir_path = "/tmp/docker";
		string file_name = stack ~ "_" ~ name ~ ".yaml";
		string file_path = dir_path ~ "/" ~ file_name;
		
		await rtl::mkdir(dir_path);
		await rtl::saveLocalFile(file_path, content);
		await static::createYamlFiles();
		
		string cmd = "sudo docker stack deploy -c " ~ file_path ~ " " ~ stack ~ " --with-registry-auth";
		string result = await DockerLib::exec(cmd ~ " 2>/dev/null");
		
		/* Sync services */
		SyncDockerServicesTask::sync_services();
		
		return msg -> method success({ "item": item }, result);
	}
	
	
	
	/**
	 * Create yaml files
	 */
	static async void createYamlFiles()
	{
		ORMProviderInterface p = @ -> method getProvider(classof ORMProviderInterface);
		string table_name = static::crudTableName();
		string dir_path = "/tmp/docker";
		
		Cursor cursor = p -> await method query
		(
			"select * from " ~ p.prefix ~ "docker_yaml_files",
		);
		
		while (true)
		{
			Dict row = await cursor.fetch();
			if (row == null)
			{
				break;
			}
			await rtl::saveLocalFile(row["file_name"], row["content"], "utf8", dir_path);
		}
		
		await cursor.close();
	}
	
	
	#endif
	
}
