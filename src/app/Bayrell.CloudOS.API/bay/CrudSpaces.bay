/*!
 *  Bayrell Cloud OS
 *
 *  (c) Copyright 2020 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Bayrell.CloudOS.API;

use Runtime.rtl;

use Runtime.Core.ApiException;
use Runtime.Core.RemoteCallAnswer;
use Runtime.Core.RemoteCallRequest;
use Runtime.Crypt.Password;
use Runtime.ORM.CursorInterface as Cursor;
use Runtime.ORM.DriverInterface as ORMDriver;
use Runtime.Web.Backend.ApiList;
use Runtime.Web.Backend.ApiMethod;
use Runtime.Web.ORM.QueryBuilder;
use Runtime.Web.CRUD.CrudApi;
use Runtime.Web.CRUD.FieldInfo;


@ApiList{ "object_name": "Bayrell.CloudOS.Spaces", "interface_name": "core.crud" }
static class CrudSpaces extends CrudApi
{
	
	/**
	 * Returns crud table name
	 */
	pure string getTableName() => "spaces";
	
	
	
	/**
	 * Returns table field value
	 */
	Collection<FieldInfo> settings() =>
	[
		new FieldInfo
		{
			"api_name": "space_id",
			"dbtype": "bigint",
			"auto_increment": true,
			"readonly": true,
			"primary": true,
		},
		new FieldInfo
		{
			"api_name": "name",
			"dbtype": "string",
			"default": "",
			"required": true,
		},
		new FieldInfo
		{
			"api_name": "domain",
			"dbtype": "string",
			"default": "",
			"required": true,
		},
	];
	
	
	
	/**
	 * Returns table field value
	 */
	Collection<Collection<string>> getDefaultOrder() =>
	[ 
		["space_id", "desc"]
	];
	
	
	
	/**
	 * Init request
	 */
	async void init()
	{
		await parent::init();
	}
	
	
	
	/**
	 * Validate
	 */
	async bool validate()
	{
		await parent::validate();
		
		if (this.action == "search")
		{
		}
		
		else if (this.action == "add" or this.action == "update")
		{
		}
		
		else if (this.action == "delete")
		{
		}
	}
	
	
	
	/**
	 * Build query
	 */
	QueryBuilder buildSearchQuery()
	{
		QueryBuilder q = parent::buildSearchQuery();
		return q;
	}
	
	
	
	/**
	 * Convert item before save to database
	 */
	async Dict convertItem(Dict item)
	{
		item = await parent::convertItem(item);
		return item;
	}
	
	
	
	/**
	 * Process item before response
	 */
	async Dict processItem(Dict item)
	{
		item = await parent::processItem(item);
		return item;
	}
	
	
	
	/**
	 * Process items
	 */
	async void processItems()
	{
		await parent::processItems();
	}
	
	
	
	/**
	 * After
	 */
	async bool after()
	{
		await parent::after();
	}
	
	
	
	/**
	 * Search api
	 */
	@ApiMethod{ "method_name": "search" }
	static async list searchAction(RemoteCallRequest request, RemoteCallAnswer answer)
	{
		return await parent::searchAction(request, answer);
	}
	
	
	
	/**
	 * Create
	 */
	@ApiMethod{ "method_name": "create" }
	static async list createAction(RemoteCallRequest request, RemoteCallAnswer answer)
	{
		return await parent::createAction(request, answer);
	}
	
	
	
	/**
	 * Update
	 */
	@ApiMethod{ "method_name": "update" }
	static async list updateAction(RemoteCallRequest request, RemoteCallAnswer answer)
	{
		return await parent::updateAction(request, answer);
	}
	
	
	
	/**
	 * Delete
	 */
	@ApiMethod{ "method_name": "delete" }
	static async list deleteAction(RemoteCallRequest request, RemoteCallAnswer answer)
	{
		return await parent::deleteAction(request, answer);
	}
	
	
	
	/**
	 * Update nginx
	 */
	async void updateNginx(int space_id)
	{
		ORMDriver orm = @.getDriver(classof ORMDriver);
		string sql = "select spaces.domain, layers_spaces.uri, softwares.backend from spaces
			left join layers_spaces on (layers_spaces.space_id = spaces.space_id)
			left join layers on (layers_spaces.layer_id = layers.layer_id)
			left join softwares on (layers.software_api_name = softwares.api_name)
			where spaces.space_id=:space_id";
		
		Cursor cursor = await orm.query
		(
			sql,
			{
				"space_id": space_id,
			}
		);
		
		string nginx_content = "";
		Collection items = await cursor.fetchAll();
		if (items.count() > 0)
		{
			string domain = items[0, "domain"];
			nginx_content ~= "server {\n";
			nginx_content ~= "\tlisten 80;\n";
			nginx_content ~= "\tserver_name " ~ domain ~ ";\n";
			nginx_content ~= "\troot /usr/share/nginx/default;\n";
			nginx_content ~= "\tindex index.html;\n";
			nginx_content ~= "\tautoindex off;\n";
			for (int i=0; i<items.count(); i++)
			{
				Dict item = items[i];
				string uri = item["uri"];
				string backend = item["backend"];
				if (rtl::isEmpty(uri) or rtl::isEmpty(backend))
				{
					continue;
				}
				nginx_content ~= "\tlocation " ~ uri ~ " {\n";
				nginx_content ~= "\t\tproxy_pass http://" ~ backend ~ ".test/;\n";
				nginx_content ~= "\t\tinclude proxy_params;\n";
				nginx_content ~= "\t}\n";
			}
			nginx_content ~= "}";
			
			await orm.insert_or_update
			(
				"nginx_files",
				{
					"name": "spaces/" ~ space_id ~ ".conf",
				},
				{
					"content": nginx_content,
					"enable": 1,
					"timestamp": rtl::time(),
				}
			);
		}
		
		await cursor.close();
	}
}