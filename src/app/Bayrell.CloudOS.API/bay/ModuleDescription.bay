/*!
 *  Bayrell Cloud OS
 *
 *  (c) Copyright 2020 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Bayrell.CloudOS.API;

use Runtime.Core.Context;
use Runtime.Core.Entity;


static class ModuleDescription
{
	
	/**
	 * Returns module name
	 * @return string
	 */
	pure string getModuleName() => "Bayrell.CloudOS.API";
	
	
	
	/**
	 * Returns module name
	 * @return string
	 */
	pure string getModuleVersion() => "0.0.1";
	
	
	
	/**
	 * Returns required modules
	 * @return Map<string>
	 */
	pure Map<string> requiredModules() => 
	{
		/* Backend */
		#ifdef BACKEND then
		'Runtime.Web.Backend': '*',
		#endif
	};
	
	
	
	/**
	 * Returns enities
	 */
	pure Collection<Dict> entities() => 
	[
		/* Register api */
		new Entity{ "name": "Bayrell.CloudOS.API.CrudNginx" },
		new Entity{ "name": "Bayrell.CloudOS.API.CrudServices" },
		new Entity{ "name": "Bayrell.CloudOS.API.CrudSoftwares" },
		new Entity{ "name": "Bayrell.CloudOS.API.CrudSpaces" },
		new Entity{ "name": "Bayrell.CloudOS.API.CrudUsers" },
		new Entity{ "name": "Bayrell.CloudOS.API.CrudYaml" },
		new Entity{ "name": "Bayrell.CloudOS.API.CrudYamlFiles" },
		new Entity{ "name": "Bayrell.CloudOS.API.Dashboard" },
		new Entity{ "name": "Bayrell.CloudOS.LogicMap" },
		
		/* Tasks */
		new Entity{ "name": "Bayrell.CloudOS.API.DockerTasks" },
	];
	
	
	
	/**
	 * Returns context settings
	 * @return Dict<string>
	 */
	pure Dict<string> appSettings(Dict env) => 
	{
		"config":
		{
		},
		"secrets":
		{
		},
		"providers":
		{
		}
	};
	
	
	
	/**
	 * Init app
	 */
	static Context appInit(Context c)
	{
		return c::init(c);
	}
	
	
	
	/**
	 * Start app
	 */
	static async Context appStart(Context c)
	{
		return await c::start(c);
	}
	
}