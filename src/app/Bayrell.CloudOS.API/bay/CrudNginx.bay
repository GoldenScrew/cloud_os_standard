/*!
 *  Bayrell Cloud OS
 *
 *  (c) Copyright 2020 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Bayrell.CloudOS.API;

use Runtime.rtl;
use Runtime.Core.ApiException;
use Runtime.Core.RemoteCallAnswer;
use Runtime.Core.RemoteCallRequest;
use Runtime.Crypt.Password;
use Runtime.ORM.CursorInterface as Cursor;
use Runtime.ORM.DriverInterface as ORMDriver;
use Runtime.Web.Backend.ApiList;
use Runtime.Web.Backend.ApiMethod;
use Runtime.Web.ORM.QueryBuilder;
use Runtime.Web.CRUD.CrudApi;
use Runtime.Web.CRUD.FieldInfo;


@ApiList{ "object_name": "Bayrell.CloudOS.Nginx", "interface_name": "core.crud" }
static class CrudNginx extends CrudApi
{
	
	/**
	 * Returns crud table name
	 */
	pure string getTableName() => "nginx_files";
	
	
	
	/**
	 * Returns table field value
	 */
	Collection<FieldInfo> settings() =>
	[
		new FieldInfo
		{
			"api_name": "id",
			"dbtype": "bigint",
			"readonly": true,
		},
		new FieldInfo
		{
			"api_name": "name",
			"dbtype": "string",
			"default": "",
			"required": true,
		},
		new FieldInfo
		{
			"api_name": "enable",
			"dbtype": "int",
			"default": "0",
		},
		new FieldInfo
		{
			"api_name": "content",
			"dbtype": "string",
			"default": "",
		},
	];
	
	
	
	/**
	 * Returns table field value
	 */
	Collection<Collection<string>> getDefaultOrder() =>
	[ 
		["id", "desc"]
	];
	
	
	
	/**
	 * Init request
	 */
	async void init()
	{
		await parent::init();
	}
	
	
	
	/**
	 * Validate
	 */
	async bool validate()
	{
		await parent::validate();
		
		if (this.action == "search")
		{
		}
		
		else if (this.action == "create" or this.action == "update")
		{
		}
		
		else if (this.action == "delete")
		{
		}
	}
	
	
	
	/**
	 * Build query
	 */
	QueryBuilder buildSearchQuery()
	{
		QueryBuilder q = parent::buildSearchQuery();
		return q;
	}
	
	
	
	/**
	 * Convert item before save to database
	 */
	async Dict convertItem(Dict item)
	{
		item = await parent::convertItem(item);
		item <= timestamp <= rtl::time();
		return item;
	}
	
	
	
	/**
	 * Process item before response
	 */
	async Dict processItem(Dict item)
	{
		item = await parent::processItem(item);
		return item;
	}
	
	
	
	/**
	 * Process items
	 */
	async void processItems()
	{
		await parent::processItems();
	}
	
	
	
	/**
	 * After
	 */
	async bool after()
	{
		await parent::after();
	}
	
	
	
	/**
	 * Search api
	 */
	@ApiMethod{ "method_name": "search" }
	static async list searchAction(RemoteCallRequest request, RemoteCallAnswer answer)
	{
		return await parent::searchAction(request, answer);
	}
	
	
	
	/**
	 * Create
	 */
	@ApiMethod{ "method_name": "create" }
	static async list createAction(RemoteCallRequest request, RemoteCallAnswer answer)
	{
		return await parent::createAction(request, answer);
	}
	
	
	
	/**
	 * Update
	 */
	@ApiMethod{ "method_name": "update" }
	static async list updateAction(RemoteCallRequest request, RemoteCallAnswer answer)
	{
		return await parent::updateAction(request, answer);
	}
	
	
	
	/**
	 * Delete
	 */
	@ApiMethod{ "method_name": "delete" }
	static async list deleteAction(RemoteCallRequest request, RemoteCallAnswer answer)
	{
		return await parent::deleteAction(request, answer);
	}
	
}