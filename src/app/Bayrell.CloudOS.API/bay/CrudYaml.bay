/*!
 *  Bayrell Cloud OS
 *
 *  (c) Copyright 2020 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Bayrell.CloudOS.API;

use Runtime.rtl;
use Runtime.fs;
use Runtime.Core.ApiException;
use Runtime.Core.RemoteCallAnswer;
use Runtime.Core.RemoteCallRequest;
use Runtime.Crypt.Password;
use Runtime.ORM.CursorInterface as Cursor;
use Runtime.ORM.DriverInterface as ORMDriver;
use Runtime.ORM.Anotations.ReadOnly;
use Runtime.ORM.Anotations.Required;
use Runtime.Web.Backend.ApiList;
use Runtime.Web.Backend.ApiMethod;
use Runtime.Web.ORM.QueryBuilder;
use Runtime.Web.CRUD.CrudApi;
use Runtime.Web.CRUD.FieldInfo;
use Bayrell.CloudOS.API.DockerLib;
use Bayrell.CloudOS.API.DockerTasks;
use Bayrell.CloudOS.ORM.Yaml;


@ApiList{ "object_name": "Bayrell.CloudOS.Yaml", "interface_name": "core.crud" }
static class CrudYaml extends CrudApi
{
	
	/**
	 * Returns orm class name
	 */
	pure string getORMClassName() => classof Yaml;
	
	
	
	/**
	 * Returns current rules
	 */
	Collection rules() =>
	[
		new ReadOnly{ "field": "yaml_id" },
		new Required{ "field": "name" },
		new Required{ "field": "stack" },
	];
	
	
	
	/**
	 * Returns table field value
	 */
	Collection<Collection<string>> getDefaultOrder() =>
	[ 
		["yaml_id", "desc"]
	];
	
	
	
	/**
	 * Init request
	 */
	async void init()
	{
		await parent::init();
	}
	
	
	
	/**
	 * Validate
	 */
	async bool validate()
	{
		await parent::validate();
		
		if (this.action == "search")
		{
		}
		
		else if (this.action == "add" or this.action == "update")
		{
		}
		
		else if (this.action == "delete")
		{
		}
	}
	
	
	
	/**
	 * Build query
	 */
	QueryBuilder buildSearchQuery()
	{
		QueryBuilder q = parent::buildSearchQuery();
		return q;
	}
	
	
	
	/**
	 * Convert item before save to database
	 */
	async Dict convertItem(Dict item)
	{
		item = await parent::convertItem(item);
		return item;
	}
	
	
	
	/**
	 * Process item before response
	 */
	async Dict processItem(Dict item)
	{
		item = await parent::processItem(item);
		return item;
	}
	
	
	
	/**
	 * Process items
	 */
	async void processItems()
	{
		await parent::processItems();
	}
	
	
	
	/**
	 * After
	 */
	async bool after()
	{
		await parent::after();
		
		/* If is success */
		if (this.isSuccess())
		{
		}
	}
	
	
	
	/**
	 * Search api
	 */
	@ApiMethod{ "method_name": "search" }
	static async list searchAction(RemoteCallRequest request, RemoteCallAnswer answer)
	{
		return await parent::searchAction(request, answer);
	}
	
	
	
	/**
	 * Create
	 */
	@ApiMethod{ "method_name": "create" }
	static async list createAction(RemoteCallRequest request, RemoteCallAnswer answer)
	{
		return await parent::createAction(request, answer);
	}
	
	
	
	/**
	 * Update
	 */
	@ApiMethod{ "method_name": "update" }
	static async list updateAction(RemoteCallRequest request, RemoteCallAnswer answer)
	{
		return await parent::updateAction(request, answer);
	}
	
	
	
	/**
	 * Delete
	 */
	@ApiMethod{ "method_name": "delete" }
	static async list deleteAction(RemoteCallRequest request, RemoteCallAnswer answer)
	{
		return await parent::deleteAction(request, answer);
	}
	
	
	
	/**
	 * Compose
	 */
	@ApiMethod{ "method_name": "compose" }
	static async list composeAction(RemoteCallRequest request, RemoteCallAnswer answer)
	{
		/* Create api */
		CrudApi api = rtl::newInstance(static::getCurrentClassName());
		
		/* Get data from request */
		api.action = "update";
		api.answer = answer;
		api.request = request;
		api.pk = request.data["pk"] |> default Dict {};
		api.item = request.data["item"] |> default Dict {};
		
		/* Init api */
		await api.init();
		
		/* Update */
		await api.update();
		
		/* Compose */
		api.action = "compose";
		await api.compose();
		
		/* After query */
		api.action = "update";
		await api.after();
		
		return [request, api.answer];
	}
	
	
	
	/**
	 * Compose
	 */
	async void compose()
	{
		/* Save yaml file */
		string name = this.new_item["name"];
		string stack = this.new_item["stack"];
		string content = this.new_item["content"];
		string dir_path = "/tmp/docker";
		string file_name = stack ~ "_" ~ name ~ ".yaml";
		string file_path = dir_path ~ "/" ~ file_name;
		
		/* Create files */
		await fs::mkdir(dir_path);
		await fs::saveFile(file_path, content);
		await static::createYamlFiles();
		
		/* Deploy */
		string cmd = "sudo docker stack deploy -c " ~ file_path ~ " " ~ stack ~ " --with-registry-auth";
		string result = await DockerLib::exec(cmd ~ " 2>/dev/null");
		
		/* Sync services */
		DockerTasks::syncServices();
	}
	
	
	
	/**
	 * Create yaml files
	 */
	static async void createYamlFiles()
	{
		/* Get ORM driver */
		ORMDriver orm = @.getDriver(classof ORMDriver);
		
		string table_name = static::getTableName();
		string dir_path = "/tmp/docker";
		
		Cursor cursor = await orm.query
		(
			"select * from yaml_files",
		);
		
		while (true)
		{
			Dict row = await cursor.fetch();
			if (row == null)
			{
				break;
			}
			await fs::saveFile(row["file_name"], row["content"], "utf8", dir_path);
		}
		
		await cursor.close();
	}
}