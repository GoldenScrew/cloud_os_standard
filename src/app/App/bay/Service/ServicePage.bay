/*!
 *  Bayrell Cloud Web Panel
 *
 *  (c) Copyright 2020 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace App.Service;

use Runtime.lib;
use Runtime.MessageRPC;
use Runtime.Web.Annotations.Route;
use Runtime.Web.Annotations.RouteList;
use Runtime.Web.Events.Mouse.MouseClickEvent;
use Runtime.Web.Events.User.ChangeEvent;
use Runtime.Web.Component;
use Runtime.Web.LayoutModel;
use Runtime.Web.RenderContainer;
use Runtime.Web.RenderHelper;
use Runtime.Web.Response;
use Runtime.Web.Button.Button;
use App.Service.ServicePageModel;


@RouteList{}
class ServicePage extends Component
{
	
	/**
	 * Returns module name
	 */
	pure string moduleName() => "App";
	
	
	
	/**
	 * Route Action
	 * @return WebContainer
	 */
	@Route{ "uri": "/services/", "name": "app.services.index" }
	static async RenderContainer actionIndex(RenderContainer container)
	{
		MessageRPC msg = @ -> await method sendMessage
		(
			new MessageRPC
			{
				"api_name": "App.Service.ServiceCrudApi",
				"space_name": "CrudInterface",
				"method_name": "search",
				"data":
				{
				},
			}
		);
		
		/* Set title */
		container <= layout <= title <= "Service page";
		
		/* Create model */
		container <= layout <= page_class <= classof ServicePage;
		container <= layout <= page_model <= new ServicePageModel
		{
			"items": (msg::isSuccess(msg)) ? msg.response : [],
		};
		container <= layout <= page_model <= item <=
			container.layout.page_model -> method getActiveItem
		;
		container <= layout <= f_inc <= 1;
		
		return container;
	}
	
	
	
	/**
	 * Returns required components
	 */
	pure Collection<string> components() => 
	[
		classof Button,
	];
	
	
	
	/**
	 * Component css
	 */
	pure string css(Dict<string> vars) => 
		@css{
			%items, %info{
				display: inline-block;
				vertical-align: top;
			}
			%items{
				width: 350px;
				position: relative;
			}
			%item{
				padding: 10px;
				cursor: pointer;
				border-bottom: 1px #ccc solid;
			}
			%item.active{
				background-color: #337ab7;
				border-color: #337ab7;
				color: white;
			}
			%item_row{
				padding-bottom: 5px;
			}
			%item_row:last-child{
				padding-bottom: 0px;
			}
			%item_label, %item_text{
				display: inline-block;
				vertical-align: top;
			}
			%item_label{
				display: none;
				width: 0px;
				text-align: right;
				padding-right: 5px;
			}
			%item_text{
				width: calc(100% - 0px);
				text-align: left;
				padding-left: 5px;
				overflow-wrap: anywhere;
			}
			%info{
				width: calc(100% - 350px);
				padding-left: 10px;
			}
			%info_row{
				padding-bottom: 15px;
			}
			%info_row:last-child{
				padding-bottom: 0px;
			}
			%info_label{
				font-weight: bold;
				padding-bottom: 5px;
			}
			%info_value{}
			%info_value input{
				width: 100%;
				padding: 5px 10px;
			}
			%info_buttons{
				text-align: center;
			}
			%info_buttons %(Button)button{
				margin-left: 10px;
				margin-right: 10px;
			}
			%info_result{
				text-align: center;
			}
			%info_result.success{
				color: green;
			}
			%info_result.error{
				color: red;
			}
		}
	;
	
	
	
	/**
	 * Component render
	 */
	pure html render(LayoutModel layout, Dict model, Dict params, html content) =>
		<div>
			<div @class='items' @key={ "items" }>
			{ 
				model.items.map
				(
					html (Dict item, int index) use (model) =>
						<div @class='item' data-index={ index } @key={ index }
							class={ model.active == index ? "active": "" }
							@event:MouseClickEvent="onItemClick"
						>
							<div @class='item_row name'>
								<div @class='item_label'>{ _("App", "Name") }:</div>
								<div @class='item_text'>{ rtl::attr(item, ["json", "Spec", "Name"], "") }</div>
							</div>
							<div @class='item_row image'>
								<div @class='item_label'>{ _("App", "Image") }:</div>
								<div @class='item_text'>{
									static::trimImageName
									(
										rtl::attr(item, ["json", "Spec", "TaskTemplate", "ContainerSpec", "Image"], "")
									)
								}</div>
							</div>
						</div>
				)
			}
			</div>
			<div @class='info' @key={ "info" }>
				{ model.active >= 0 ? static::showActiveItem(layout, model) : "" }
			</div>
		</div>
	;
	
	
	
	/**
	 * Component render
	 */
	pure html showActiveItem(LayoutModel layout, Dict model) =>
		<div @class='info_row'>
			<div @class='info_label'>{ _("App", "Name") }:</div>
			<div @class='info_value'>
				<input data-name="name" @event:ChangeEvent="onItemChange" readonly="readonly"
					value={ rtl::attr(model.item, ["json", "Spec", "Name"]) } 
				/>
			</div>
		</div>
		<div @class='info_row'>
			<div @class='info_label'>{ _("App", "Image") }:</div>
			<div @class='info_value'>
				<input data-name="image" @event:ChangeEvent="onItemChange"
					value={ rtl::attr(model.item, ["json", "Spec", "TaskTemplate", "ContainerSpec", "Image"]) }
				/>
			</div>
		</div>
		<div @class='info_row info_buttons'>
			<Button @eventAsync:MouseClickEvent="onUpdateClick">Update</Button>
			<Button @eventAsync:MouseClickEvent="onDeleteClick">Delete</Button>
		</div>
		<div @class='info_row info_result' class={ static::getResultClass(model) }>
			{ model.get("message", "") }
			{ model.get("success", "") }
			{ model.get("error", "") }
		</div>
	;
	
	
	
	/**
	 * Returns result class
	 */
	pure string getResultClass(ServicePageModel model)
	{
		if (model.success != "") return "success";
		if (model.error != "") return "error";
		return "";
	}
	
	
	
	/**
	 * Trim name
	 */
	pure string trimImageName(string name)
	{
		int pos = rs::search(name, "@");
		if (pos != -1) name = rs::substr(name, 0, pos);
		return name;
	}
	
	
	
	#ifdef FRONTEND then
	
	/**
	 * Click item
	 */
	void onItemClick(MouseClickEvent e)
	{
		Dict model = this.model;
		model <= active <= e.target.@getAttribute("data-index");
		model <= item <= model -> method getActiveItem;
		this.setModel(model);
	}
	
	
	
	/**
	 * Item change
	 */
	void onItemChange(ChangeEvent e)
	{
		Dict item = this.model.item;
		string name = e.target.@getAttribute("data-name");
		
		if (name == "image")
		{
			item = rtl::setAttr(item, ["json", "Spec", "TaskTemplate", "ContainerSpec", "Image"], e.value);
		}
		
		this.updateModel
		{
			"item": item,
		};
	}
	
	
	
	/**
	 * Update click
	 */
	async void onUpdateClick(MouseClickEvent e)
	{
		Dict item = this.model.item;
		int active = this.model.active;
		
		this.updateModel
		{
			"message": _("App", "Please wait ..."),
			"error": "",
			"success": "",
		};
		
		Dict model = this.model;
		model <= items <= this.model.items.setIm(active, item);
		model <= item <= model -> method getActiveItem;
		
		MessageRPC msg = @ -> await method sendMessage
		(
			new MessageRPC
			{
				"api_name": "App.Service.ServiceCrudApi",
				"space_name": "CrudInterface",
				"method_name": "update",
				"data": model -> attr "item" -> attr "json",
			}
		);		
		
		bool is_success = msg -> method isSuccess;
		if (is_success)
		{
			this.setModel(model);
		}
		
		this.updateModel
		{
			"message": "",
			"error": msg -> attr "error",
			"success": msg -> attr "response" -> attr "Message" -> monad lib::default(""),
		};
	}
	
	
	
	/**
	 * Delete click
	 */
	async void onDeleteClick(MouseClickEvent e)
	{
	}
	
	#endif
	
}