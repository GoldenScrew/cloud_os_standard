/*!
 *  Bayrell Cloud Web Panel
 *
 *  (c) Copyright 2020 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace App.Dashboard;

use Runtime.lib;
use Runtime.MessageRPC;
use Runtime.RuntimeUtils;
use Runtime.ORM.Cursor;
use Runtime.ORM.ORMProviderInterface;
use Runtime.ORM.QueryBuilder;
use Runtime.Web.Annotations.ApiList;
use Runtime.Web.Annotations.ApiMethod;
use Runtime.Web.Annotations.ApiMiddleware;


@ApiList{ "api_name": "App.Dashboard", "space_name": "default" }
@ApiMiddleware{ "value": "App.User.AuthToken::checkAuthApiMiddleware" }
class DashboardApi
{
	
	#ifdef BACKEND then
	
	
	/**
	 * Returns services info
	 */
	@ApiMethod{ "method_name": "getServices" }
	static async MessageRPC getServices(MessageRPC msg)
	{
		ORMProviderInterface p = @ -> method getProvider(classof ORMProviderInterface);
		
		QueryBuilder q = new QueryBuilder()
			-> method select("docker_services", p.prefix)
			-> method fields([
				"id", "service_id", "_name", "_image", "enable", "timestamp", "json", "tasks", "balancer",
			])
			-> method order([ ["_name", "asc"] ])
			-> method where
			{
				"is_deleted": 0,
			}
		;
		
		Collection services = p
			-> await method execute(q)
			-> await method getAll
			-> lib::map
			(
				Dict (Dict item)
				{
					item = item
						-> lib::set( "balancer", RuntimeUtils::json_decode(item["balancer"]) )
						-> lib::set( "tasks", RuntimeUtils::json_decode(item["tasks"]) )
					;
					
					/* Sort tasks by time */
					item <= tasks <= item["tasks"].sortIm
					(
						bool (Dict a, Dict b)
						{
							int time_a = rtl::timestamp( rs::substr(a["Status"]["Timestamp"], 0, 19) );
							int time_b = rtl::timestamp( rs::substr(b["Status"]["Timestamp"], 0, 19) );
							return time_a < time_b;
						}
					);
					
					return item;
				}
			)
		;
		
		return msg -> method success(services);
	}
	
	
	
	/**
	 * Returns nodes info
	 */
	@ApiMethod{ "method_name": "getNodes" }
	static async MessageRPC getNodes(MessageRPC msg)
	{
		return msg -> method success(null);
	}
	
	
	#endif
	
}