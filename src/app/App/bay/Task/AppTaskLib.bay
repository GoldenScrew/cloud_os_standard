/*!
 *  Bayrell Cloud Web Panel
 *
 *  (c) Copyright 2020 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace App.Task;

use Runtime.lib;
use Runtime.RuntimeUtils;
use Runtime.ORM.Cursor;
use Runtime.ORM.ORMProviderInterface;


class AppTaskLib
{
	
	/**
	 * Send docker command
	 */
	static async string dockerApi(string url, string m = "GET", string post = null)
	{
		string content = "";
		string cmd = "sudo /usr/bin/curl -s -X " ~ m ~ " -H 'Content-Type: application/json' ";
		if (post != null) cmd ~= "-d '" ~ post ~ "' ";
		
		cmd ~= "--unix-socket /var/run/docker.sock http:/v1.39" ~ url;
		
		#ifcode PHP then
		$content = @shell_exec($cmd . " &2>/dev/null");
		#endif
		
		return content;
	}
	
	
	
	/**
	 * Get diff from spec
	 */
	pure Dict getDockerUpdateSpec(Dict old_json, Dict new_json)
	{
		if (old_json === null) return null;
		if (new_json === null) return null;
		
		bool updated = false;
		Dict diff_spec = rtl::attr(old_json, ["Spec"], {});
		
		/* Change image */
		string old_image = rtl::attr(old_json, ["Spec", "TaskTemplate", "ContainerSpec", "Image"], "");
		string new_image = rtl::attr(new_json, ["Spec", "TaskTemplate", "ContainerSpec", "Image"], "");
		if (old_image != new_image and new_image != "")
		{
			if (rtl::attr(diff_spec, ["TaskTemplate"], null) === null)
			{
				diff_spec = rtl::setAttr(diff_spec, ["TaskTemplate"], {});
			}
			if (rtl::attr(diff_spec, ["TaskTemplate", "ContainerSpec"], null) === null)
			{
				diff_spec = rtl::setAttr(diff_spec, ["TaskTemplate", "ContainerSpec"], {});
			}
			diff_spec = rtl::setAttr(diff_spec, ["TaskTemplate", "ContainerSpec", "Image"], new_image);
			updated = true;
		}
		
		return [updated, diff_spec];
	}
	
	
	
	/**
	 * Get service from docker
	 */
	static async Dict dockerGetService(string service_id)
	{
		string url_api = "/services/" ~ service_id;
		string content = await AppTaskLib::dockerApi(url_api);
		return RuntimeUtils::json_decode(content);
	}
	
	
	
	/**
	 * Update service in docker
	 */
	static async Dict dockerUpdateService(Dict new_json)
	{
		string service_id = new_json -> attr "ID";
		if (service_id == null) return {"Error": _("App", "Service ID is not set"), "Code": -1};
		
		Dict old_json = static::dockerGetService(service_id);
		service_id = old_json -> attr "ID";
		if (service_id == null) return {"Error": _("App", "Service not found"), "Code": -2 };
		
		string version = old_json -> attr "Version" -> attr "Index";
		if (version == null) return {};
		
		list res = static::getDockerUpdateSpec(old_json, new_json);
		if (res == null) return {"Error": _("App", "Update service spec error"), "Code": -3  };
		
		bool updated = res[0];
		Dict diff_spec = res[1];
		if (not updated) return {"Message": _("App", "Service not updated"), "Code": 2  };
		
		string s = RuntimeUtils::json_encode(diff_spec);
		string url_api = "/services/" ~ service_id ~ "/update?version=" ~ version;
		
		/* Update service */
		string content = await AppTaskLib::dockerApi(url_api, "POST", s);
		Dict res = RuntimeUtils::json_decode(content);
		
		res = res.setIm("Message", _("App", "Service updated")).setIm("Code", 1);
		return res;
	}
	
	
	
	/**
	 * Delete service in docker
	 */
	static async Dict dockerDeleteService(Dict spec_json)
	{
		string service_id = spec_json -> attr "ID";
		if (service_id == null) return {"Error": _("App", "Service ID is not set"), "Code": -1};
		
		/* Delete service */
		string url_api = "/services/" ~ service_id;
		string content = await AppTaskLib::dockerApi(url_api, "DELETE");
		Dict res = RuntimeUtils::json_decode(content);
		
		int code = 0;
		string message = res.get("message", "");
		string error = "";
		if (message == "")
		{
			code = 1;
			message = _("App", "Service deleted");
		}
		else
		{
			error = message;
			message = "";
			code = -1;
		}
		
		res =
		{
			"Error": error,
			"Message": message,
			"Code": code,
		};
		return res;
	}
	
	
	
	/**
	 * Returns service by id
	 */
	static async Dict dbGetServiceById(string service_id)
	{
		if (service_id == "") return null;
		ORMProviderInterface p = @ -> method getProvider(classof ORMProviderInterface);
		Dict item = p
			-> await method query
			(
				"select * from " ~ p.prefix ~ "docker_services where service_id = :service_id limit 1",
				{
					"service_id": service_id,
				}
			)
			-> await method getOne
		;
		return item;
	}
}