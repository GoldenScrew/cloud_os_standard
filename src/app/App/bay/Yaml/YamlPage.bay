/*!
 *  Bayrell Cloud Web Panel
 *
 *  (c) Copyright 2020 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace App.Yaml;

use Runtime.lib;
use Runtime.MessageRPC;
use Runtime.Web.Annotations.Route;
use Runtime.Web.Annotations.RouteList;
use Runtime.Web.Annotations.RouteMiddleware;
use Runtime.Web.Events.Mouse.MouseClickEvent;
use Runtime.Web.Events.User.ChangeEvent;
use Runtime.Web.Component;
use Runtime.Web.LayoutModel;
use Runtime.Web.RenderContainer;
use Runtime.Web.RenderHelper;
use Runtime.Web.Response;
use Runtime.Web.CRUD.CrudEvent;
use Runtime.Web.CRUD.CrudInterface;
use Runtime.Web.CRUD.CrudModel;
use Runtime.Web.CRUD.ListPage;
use Runtime.Web.Button.Button;
use Runtime.Web.Dialog.Dialog;
use Runtime.Web.Dialog.DialogEvent;
use Runtime.Web.Dialog.DialogModel;
use App.Yaml.YamlForm;
use App.Yaml.YamlPageModel;


@RouteList{}
@RouteMiddleware{ "value": "App.User.AuthToken::checkAuthMiddleware" }
class YamlPage extends ListPage
{
	
	
	/**
	 * Returns module name
	 */
	pure string moduleName() => "App";
	
	
	
	/**
	 * Returns api name
	 */
	pure string crudApiName() => "App.Yaml";
	
	
	
	/**
	 * Returns form class name
	 */
	pure string getFormClassName() => classof YamlForm;
	
	
	
	/**
	 * Route Action
	 * @return WebContainer
	 */
	@Route{ "uri": "/yaml/", "name": "app.yaml.index" }
	static async RenderContainer actionIndex(RenderContainer container)
	{
		MessageRPC msg = @ -> await method sendMessage
		{
			"api_name": static::crudApiName(),
			"space_name": classof CrudInterface,
			"method_name": "search",
			"data":
			{
			},
		};
		
		/* Get items */
		Collection items = msg::isSuccess(msg) ? msg["response"]["items"] : [];
		
		/* Set title */
		container <= layout <= title <= "Yaml";
		container <= layout <= layout_name <= "admin";
		
		/* Create model */
		container <= layout <= page_class <= classof YamlPage;
		container <= layout <= page_model <= YamlPageModel::create();
		container <= layout <= page_model <= items <= items != null ? items : [];
		container <= layout <= f_inc <= 1;
		
		/* Add top buttons */
		container = rtl::setAttr
		(
			container,
			["layout", "storage", "App.Layout.TopButtons"],
			[
				{
					"label": "Add",
					"component": classof YamlPage,
					"onClick": "onShowAddClick",
				}
			]
		);
		
		return container;
	}
	
	
	
	/**
	 * Render Top Buttons
	 */
	pure html renderTopButtons(LayoutModel layout, CrudModel model, Dict params) => "";
	
	
	
	#ifdef FRONTEND then
	
	
	/**
	 * Form add Event
	 */
	async void onCrudEvent(CrudEvent e)
	{
		CrudModel model = this.model();
		
		if (e.event == "compose")
		{
			await this.onComposeItem( e.item );
			return;
		}
		
		await parent::onCrudEvent(e);
	}
	
	
	
	/**
	 * Compose item
	 */
	async void onComposeItem(Dict item)
	{
		CrudModel model = this.model();
		string api_name = static::crudApiName();
		
		/* Set wait message */
		this.form_edit.setApiWaitResponse();
		
		/* Call create api */
		MessageRPC msg = @ -> await method sendMessage
		{
			"api_name": api_name,
			"space_name": classof CrudInterface,
			"method_name": "compose",
			"data":
			{
				"item": item,
			},
		};
		
		/* Set result */
		bool is_success = msg -> method isSuccess;
		if (is_success)
		{
			CrudModel model = this.model();
			Dict item = msg["response"]["item"];
			
			/* Find index */
			int index = model.items.find( bool (Dict elem) use (item) => item["id"] == elem["id"] );
			this.updateModel
			{
				"items": model.items.setIm(index, item),
			};
			this.form_edit.updateModel
			{
				"item": item,
			}
			
			/* Set form message */
			this.form_edit.setApiResponse(msg);
		}
		else
		{
			/* Set error message */
			this.form_edit.setApiResponse(msg);
		}
	}
	
	
	#endif
	
}