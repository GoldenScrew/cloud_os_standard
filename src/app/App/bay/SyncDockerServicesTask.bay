/*!
 *  Bayrell Cloud Web Panel
 *
 *  (c) Copyright 2020 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace App;

use Runtime.lib;
use Runtime.RuntimeUtils;
use Runtime.Task.Annotations.CronTask;
use Runtime.Task.Annotations.CronTimer;
use Runtime.Task.Annotations.TaskList;
use Runtime.Task.Annotations.TaskMethod;
use Runtime.Task.TaskOutputProvider;
use Runtime.ORM.Cursor;
use Runtime.ORM.ORMProviderInterface;
use App.AppLib;


@TaskList{}
class SyncDockerServicesTask
{
	
	@CronTimer
	{
		"timer": 15,
	}
	static async void sync()
	{
		await static::sync_services();
	}
	
	
	
	/**
	 * Sync services
	 */
	static async void sync_services()
	{
		TaskOutputProvider output = @ -> method getProvider(classof TaskOutputProvider);
		ORMProviderInterface p = @ -> method getProvider(classof ORMProviderInterface);
		
		int time = @.time();
		string s = AppLib::dockerApi("/services");
		
		Collection services = RuntimeUtils::json_decode(s);
		
		for (int i=0; i<services.count(); i++)
		{
			Dict json = services.item(i);
			string service_id = json.get("ID", "");
			string service_name = json -> lib::attr(["Spec", "Name"], "");
			string service_image = json -> lib::attr(["Spec", "TaskTemplate", "ContainerSpec", "Image"], "");
			
			output -> method writeln ("Update service " ~ service_name);
			
			
			/* Insert or update */
			p
				/* -> lib::copy{ "log_query": true } */
				-> await method insert_or_update
				(
					p.prefix ~ "docker_services",
					{
						"service_id": service_id,
					},
					{
						"_name": service_name,
						"_image": service_image,
						"is_deleted": 0,
						"enable": 1,
						"timestamp": time,
						"json": RuntimeUtils::json_encode(json),
					}
				)
				-> await method end
			;
			
		}
		
		p
			-> await method query
			(
				"update " ~ p.prefix ~ "docker_services set enable=0 where timestamp != :timestamp",
				{
					"timestamp": time,
				}
			)
			-> await method end
		;
		
		p
			-> await method query
			(
				"delete from " ~ p.prefix ~ "docker_services where is_deleted=1 and timestamp < :timestamp",
				{
					"timestamp": time - 24*60*60,
				}
			)
			-> await method end
		;
		
	}
	
	
}
