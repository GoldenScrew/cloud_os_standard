/*!
 *  Bayrell Cloud Web Panel
 *
 *  (c) Copyright 2020 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace App.User;

use Runtime.lib;
use Runtime.MessageRPC;
use Runtime.Monad;
use Runtime.RuntimeUtils;
use Runtime.ORM.Cursor;
use Runtime.ORM.ORMProviderInterface;
use Runtime.Web.Annotations.ApiList;
use Runtime.Web.Annotations.ApiMethod;
use Runtime.Web.Annotations.Route;
use Runtime.Web.Annotations.RouteList;
use Runtime.Web.Cookie;
use Runtime.Web.JsonResponse;
use Runtime.Web.RenderContainer;
use Runtime.Web.Response;


@ApiList{ "space_name": "CrudInterface" }
class UserCrudApi
{
	
	
	/**
	 * Search
	 */
	@ApiMethod{ "method_name": "search" }
	static async MessageRPC search(MessageRPC msg)
	{
		ORMProviderInterface p = @ -> method getProvider(classof ORMProviderInterface);
		
		string sql = "select * from " ~ p.prefix ~ "docker_users order by id desc limit 100";
		Cursor cursor = p
			-> await method query(sql)
		;
		Collection<Dict> res = await cursor.fetchAll
		(
			Dict (Dict item)
			{
				return item;
			}
		);
		cursor.close();
		
		return msg -> method success(res);
	}
	
	
	
	/**
	 * Add
	 */
	@ApiMethod{ "method_name": "add" }
	static async MessageRPC add(MessageRPC msg)
	{
		ORMProviderInterface p = @ -> method getProvider(classof ORMProviderInterface);
		
		string name = msg -> attr "data" -> attr "name";
		string content = msg -> attr "data" -> attr "content";
		
		/* Insert */
		int id = p
			-> await method insert
			(
				p.prefix ~ "docker_users",
				{
					"name": name,
					"content": content,
				}
			)
			-> await method end
		;
		
		return msg -> method success({ "id": id, }, _("App", "Success"));
	}
	
	
	
	/**
	 * Update
	 */
	@ApiMethod{ "method_name": "update" }
	static async MessageRPC update(MessageRPC msg)
	{
		ORMProviderInterface p = @ -> method getProvider(classof ORMProviderInterface);
		
		string id = msg -> attr "data" -> attr "id";
		string name = msg -> attr "data" -> attr "name";
		string content = msg -> attr "data" -> attr "content";
		
		/* Insert or update */
		p
			-> await method insert_or_update
			(
				p.prefix ~ "docker_users",
				{
					"id": id,
				},
				{
					"name": name,
					"content": content,
				}
			)
			-> await method end
		;
		
		return msg -> method success(null, _("App", "Success"));
	}
	
	
	
	/**
	 * Delete
	 */
	@ApiMethod{ "method_name": "delete" }
	static async MessageRPC delete(MessageRPC msg)
	{
		ORMProviderInterface p = @ -> method getProvider(classof ORMProviderInterface);
		
		string id = msg -> attr "data";
		p
			-> await method query
			(
				"delete from " ~ p.prefix ~ "docker_users where id=:id",
				{
					"id": id,
				}
			)
			-> await method end
		;
		
		return msg -> method success(null, _("App", "Success"));
	}
	
}
