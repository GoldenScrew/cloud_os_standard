/*!
 *  Bayrell Cloud Web Panel
 *
 *  (c) Copyright 2020 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace App.User;

use Runtime.lib;
use Runtime.MessageRPC;
use Runtime.Web.Annotations.Route;
use Runtime.Web.Annotations.RouteList;
use Runtime.Web.Annotations.RouteMiddleware;
use Runtime.Web.Events.Mouse.MouseClickEvent;
use Runtime.Web.Events.User.ChangeEvent;
use Runtime.Web.Component;
use Runtime.Web.LayoutModel;
use Runtime.Web.RenderContainer;
use Runtime.Web.RenderHelper;
use Runtime.Web.Response;
use Runtime.Web.CRUD.CrudInterface;
use Runtime.Web.CRUD.CrudModel;
use Runtime.Web.CRUD.ListPage;
use Runtime.Web.Button.Button;
use Runtime.Web.Dialog.Dialog;
use Runtime.Web.Dialog.DialogEvent;
use Runtime.Web.Dialog.DialogModel;
use App.User.UserPageModel;


@RouteList{}
@RouteMiddleware{ "value": "App.User.AuthToken::checkAuthRouteMiddleware" }
class UserPage extends ListPage
{
	
	
	/**
	 * Returns module name
	 */
	pure string moduleName() => "App";
	
	
	
	/**
	 * Returns api name
	 */
	pure string crudApiName() => "App.User";
	
	
	
	/**
	 * Route Action
	 * @return WebContainer
	 */
	@Route{ "uri": "/users/", "name": "app.users.index" }
	static async RenderContainer actionIndex(RenderContainer container)
	{
		MessageRPC msg = container -> await method sendMessage
		{
			"api_name": static::crudApiName(),
			"space_name": classof CrudInterface,
			"method_name": "search",
			"data":
			{
			},
		};
		
		/* Get items */
		Collection items = msg::isSuccess(msg) ? msg["response"]["items"] : [];
		
		/* Set title */
		container <= layout <= title <= "User";
		container <= layout <= layout_name <= "admin";
		
		/* Create model */
		container <= layout <= page_class <= classof UserPage;
		container <= layout <= page_model <= UserPageModel::create();
		container <= layout <= page_model <= items <= items != null ? items : [];
		container <= layout <= f_inc <= 1;
		
		/* Add top buttons */
		container = rtl::setAttr
		(
			container,
			["layout", "storage", "App.Layout.TopButtons"],
			[
				{
					"label": "Add",
					"component": classof UserPage,
					"onClick": "onShowAddClick",
				}
			]
		);
		
		return container;
	}
	
	
	
	/**
	 * Render Top Buttons
	 */
	pure html renderTopButtons(LayoutModel layout, CrudModel model, Dict params) => "";
	
}