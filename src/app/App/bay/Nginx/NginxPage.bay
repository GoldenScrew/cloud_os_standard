/*!
 *  Bayrell Cloud Web Panel
 *
 *  (c) Copyright 2020 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace App.Nginx;

use Runtime.lib;
use Runtime.MessageRPC;
use Runtime.Web.Annotations.Route;
use Runtime.Web.Annotations.RouteList;
use Runtime.Web.Events.Mouse.MouseClickEvent;
use Runtime.Web.Events.User.ChangeEvent;
use Runtime.Web.Component;
use Runtime.Web.LayoutModel;
use Runtime.Web.RenderContainer;
use Runtime.Web.RenderHelper;
use Runtime.Web.Response;
use Runtime.Web.CRUD.CrudModel;
use Runtime.Web.CRUD.ListPage;
use Runtime.Web.Button.Button;
use Runtime.Web.Dialog.Dialog;
use Runtime.Web.Dialog.DialogEvent;
use Runtime.Web.Dialog.DialogModel;
use App.Nginx.NginxCrudModel;


@RouteList{}
class NginxPage extends ListPage
{
	
	
	/**
	 * Returns module name
	 */
	pure string moduleName() => "App";
	
	
	
	/**
	 * Route Action
	 * @return WebContainer
	 */
	@Route{ "uri": "/nginx/", "name": "app.nginx.index" }
	static async RenderContainer actionIndex(RenderContainer container)
	{
		MessageRPC msg = @ -> await method sendMessage
		(
			new MessageRPC
			{
				"api_name": "App.Nginx.NginxCrudApi",
				"space_name": "CrudInterface",
				"method_name": "search",
				"data":
				{
				},
			}
		);
		
		/* Set title */
		container <= layout <= title <= "Nginx";
		
		/* Create model */
		container <= layout <= page_class <= classof NginxPage;
		container <= layout <= page_model <= NginxCrudModel::create();
		container <= layout <= page_model <= items <= msg::isSuccess(msg) ? msg.response : [];
		container <= layout <= f_inc <= 1;
		
		return container;
	}
	
	
	
	/**
	 * Render item
	 */
	pure html renderItem(LayoutModel layout, NginxCrudModel model, Dict item, Dict params) =>
		<div @class="item_row name">
			<div @class="item_label">{ _("App", "Name") }:</div>
			<div @class="item_text">{ rtl::attr(item, ["name"], "") }</div>
		</div>
	;
	
}