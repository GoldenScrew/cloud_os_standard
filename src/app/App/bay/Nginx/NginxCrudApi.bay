/*!
 *  Bayrell Cloud Web Panel
 *
 *  (c) Copyright 2020 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace App.Nginx;

use Runtime.lib;
use Runtime.MessageRPC;
use Runtime.Monad;
use Runtime.RuntimeUtils;
use Runtime.Exceptions.ApiException;
use Runtime.Exceptions.RuntimeException;
use Runtime.ORM.Cursor;
use Runtime.ORM.ORMProviderInterface;
use Runtime.Web.Annotations.ApiList;
use Runtime.Web.Annotations.ApiMethod;
use Runtime.Web.Annotations.Route;
use Runtime.Web.Annotations.RouteList;
use Runtime.Web.CRUD.CrudApi;
use Runtime.Web.CRUD.CrudInterface;
use Runtime.Web.CRUD.FieldInfo;
use Runtime.Web.Cookie;
use Runtime.Web.JsonResponse;
use Runtime.Web.RenderContainer;
use Runtime.Web.Response;
use App.Nginx.NginxPageModel;


@ApiList{ "api_name": "App.Nginx", "space_name": classof CrudInterface }
class NginxCrudApi extends CrudApi implements CrudInterface
{
	
	#ifdef BACKEND then
	
	
	/**
	 * Returns crud model name
	 */
	pure string crudModelName() => classof NginxPageModel;
	
	
	
	/**
	 * Returns crud table name
	 */
	pure string crudTableName() => "docker_nginx";
	
	
	
	/**
	 * Api init
	 */
	pure async CrudApi apiInit(CrudApi api) => api;
	
	
	
	/**
	 * Convert item from database
	 */
	pure fn<Dict, Dict> fromDatabase(CrudApi api) =>
		Dict (Dict item) => item
	;
	
	
	
	/**
	 * Convert item to database
	 */
	pure fn<Dict, Dict> toDatabase(CrudApi api) =>
		Dict (Dict item) => item
	;
	
	
	
	/**
	 * Process item
	 */
	pure fn<var, Dict> processItem(CrudApi api, Dict old_item = null) =>
		async var (Dict item) use (api, old_item)
		{
			if (api.action == "create" or api.action == "update")
			{
				item <= timestamp <= @.time();
			}
			return item;
		}
	;
	
	
	
	/**
	 * Search
	 */
	@ApiMethod{ "method_name": "search" }
	static async MessageRPC search(MessageRPC msg)
	{
		return await parent::search(msg);
	}
	
	
	
	/**
	 * Get by ID
	 */
	@ApiMethod{ "method_name": "getByID" }
	static async MessageRPC getByID(MessageRPC msg)
	{
		return await parent::getByID(msg);
	}
	
	
	
	/**
	 * Create
	 */
	@ApiMethod{ "method_name": "create" }
	static async MessageRPC create(MessageRPC msg)
	{
		return await parent::create(msg);
	}
	
	
	
	/**
	 * Update
	 */
	@ApiMethod{ "method_name": "update" }
	static async MessageRPC update(MessageRPC msg)
	{
		return await parent::update(msg);
	}
	
	
	
	/**
	 * Delete
	 */
	@ApiMethod{ "method_name": "delete" }
	static async MessageRPC delete(MessageRPC msg)
	{
		return await parent::delete(msg);
	}
	
	
	#endif
	
}
