/*!
 *  Bayrell Cloud OS
 *
 *  (c) Copyright 2020 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Bayrell.CloudOS.Backend.API;

use Runtime.rtl;
use Runtime.lib;
use Runtime.Core.ApiException;
use Runtime.Core.RemoteCallAnswer;
use Runtime.Core.RemoteCallRequest;
use Runtime.Web.Backend.ApiList;
use Runtime.Web.Backend.ApiMethod;
use Runtime.Web.Backend.ApiMiddleware;
use Runtime.Web.ORM.QueryBuilder;
use Runtime.Web.CRUD.CrudApi;
use Runtime.Web.CRUD.Rules.AllowFields;
use Runtime.Web.CRUD.Rules.Dictionary;
use Runtime.Web.CRUD.Rules.ReadOnly;
use Runtime.Web.CRUD.Rules.Required;
use Runtime.Web.CRUD.Rules.Rule;
use Bayrell.CloudOS.Backend.ORM.Domain;
use Bayrell.CloudOS.Backend.ORM.Layer;
use Bayrell.CloudOS.Backend.ORM.LayerRoute;
use Bayrell.CloudOS.Backend.ORM.Service;
use Bayrell.CloudOS.Backend.ORM.Space;


@ApiList{ "object_name": "Bayrell.CloudOS.LayerRoute", "interface_name": "core.crud" }
@ApiMiddleware{ "value": "Runtime.Web.Auth.AuthBackend::apiCheckAuthMiddleware" }
static class LayerRouteCrud extends CrudApi
{
	
	/**
	 * Returns orm class name
	 */
	pure string getORM() => classof LayerRoute;
	
	
	
	/**
	 * Returns current rules
	 */
	Collection<Rule> rules() =>
	[
		new AllowFields
		{
			"fields":
			[
				"domain_name",
				"route",
				"layer_id",
				"layer_uid",
				"layer_name",
				"layer_domain_name",
				"layer_route",
				"service_name",
				"software_api_name",
			]
		},
		new ReadOnly{ "api_name": "layer_uid" },
		new ReadOnly{ "api_name": "layer_name" },
		new ReadOnly{ "api_name": "layer_domain_name" },
		new ReadOnly{ "api_name": "layer_route" },
		new ReadOnly{ "api_name": "service_name" },
		new ReadOnly{ "api_name": "software_api_name" },
		new Required{ "api_name": "domain_name" },
		new Required{ "api_name": "route" },
		
		/* Add domains dictionary */
		new Dictionary
		{
			"name": "domains",
			"class_name": classof Domain,
		},
		
		/* Add layers dictionary */
		new Dictionary
		{
			"name": "layers",
			"class_name": classof Layer,
			"fields":
			[
				"layer_id",
				"layer_name",
				"layer_uid",
				"route",
				"domain_name",
				"service_name",
				"software_api_name",
			],
			"buildSearchQuery": QueryBuilder (QueryBuilder q)
			{
				return q
					|> .alias("layers")
					|> .fields
					([
						"layers.*",
						"spaces.domain_name as domain_name",
						"services.docker_name as service_name",
						"services.software_api_name as software_api_name",
					])
					|> .leftJoin(Space::table_name(), "spaces", "spaces.space_id=layers.space_id")
					|> .leftJoin(Service::table_name(), "services", "services.service_id=layers.service_id")
				;
			},
		},
	];
	
	
	
	/**
	 * Returns table field value
	 */
	Collection<Collection<string>> getDefaultOrder() =>
	[ 
		["domain_name", "asc"],
		["route", "asc"]
	];
	
	
	
	/**
	 * Build query
	 */
	QueryBuilder buildSearchQuery(QueryBuilder q) =>
		parent::buildSearchQuery(q)
		|> .alias("routes")
		|> .fields
		([
			"routes.*",
			"layers.layer_uid",
			"layers.layer_name",
			"spaces.domain_name as layer_domain_name",
			"layers.route as layer_route",
			"services.docker_name as service_name",
			"services.software_api_name as software_api_name",
		])
		|> .leftJoin(Layer::table_name(), "layers", "layers.layer_id=routes.layer_id")
		|> .leftJoin(Space::table_name(), "spaces", "spaces.space_id=layers.space_id")
		|> .leftJoin(Service::table_name(), "services", "services.service_id=layers.service_id")
	;
	
	
	
	/**
	 * Extend search filter
	 */
	Collection<list> extendSearchFilter(Collection<list> filter) =>
		filter
		|> .map
		(
			Collection (Collection item)
			{
				if (item[0] == "domain_name") item <= 0 <= "routes.domain_name";
				if (item[0] == "route") item <= 0 <= "routes.route";
				return item;
			}
		)
	;
	
	
	
	/**
	 * Init request
	 */
	async void init()
	{
		await parent::init();
	}
	
	
	
	/**
	 * Validate
	 */
	async void validate()
	{
		await parent::validate();
	}
	
	
	
	/**
	 * After
	 */
	async void after()
	{
		await parent::after();
		
		/* If is modify success */
		if (this.isSuccess() and this.isModify())
		{
			string old_domain_name = this.old_item["domain_name"];
			string new_domain_name = this.new_item["domain_name"];
			await Domain::updateNginx(old_domain_name);
			if (new_domain_name != old_domain_name) await Domain::updateNginx(new_domain_name);
		}
	}
	
	
	
	/**
	 * Search api
	 */
	@ApiMethod{ "method_name": "search" }
	static async list searchAction(RemoteCallRequest request, RemoteCallAnswer answer)
	{
		return await parent::searchAction(request, answer);
	}
	
	
	
	/**
	 * Create
	 */
	@ApiMethod{ "method_name": "create" }
	static async list createAction(RemoteCallRequest request, RemoteCallAnswer answer)
	{
		return await parent::createAction(request, answer);
	}
	
	
	
	/**
	 * Update
	 */
	@ApiMethod{ "method_name": "update" }
	static async list updateAction(RemoteCallRequest request, RemoteCallAnswer answer)
	{
		return await parent::updateAction(request, answer);
	}
	
	
	
	/**
	 * Delete
	 */
	@ApiMethod{ "method_name": "delete" }
	static async list deleteAction(RemoteCallRequest request, RemoteCallAnswer answer)
	{
		return await parent::deleteAction(request, answer);
	}
	
}