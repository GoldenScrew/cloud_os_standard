/*!
 *  Bayrell Cloud OS
 *
 *  (c) Copyright 2020 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Bayrell.CloudOS.Backend.API;

use Runtime.rtl;
use Runtime.lib;
use Runtime.Core.ApiException;
use Runtime.Core.RemoteCallAnswer;
use Runtime.Core.RemoteCallRequest;
use Runtime.Backend.ApiList;
use Runtime.Backend.ApiMethod;
use Runtime.Backend.ApiMiddleware;
use Runtime.Web.ORM.QueryBuilder;
use Runtime.Web.CRUD.CrudApi;
use Runtime.Web.CRUD.Rules.AllowFields;
use Runtime.Web.CRUD.Rules.DefaultValue;
use Runtime.Web.CRUD.Rules.Dictionary;
use Runtime.Web.CRUD.Rules.ReadOnly;
use Runtime.Web.CRUD.Rules.Required;
use Runtime.Web.CRUD.Rules.Rule;
use Bayrell.CloudOS.Backend.ORM.Domain;
use Bayrell.CloudOS.Backend.ORM.Layer;
use Bayrell.CloudOS.Backend.ORM.Service;
use Bayrell.CloudOS.Backend.ORM.Space;


@ApiList{ "object_name": "Bayrell.CloudOS.Layer", "interface_name": "core.crud" }
@ApiMiddleware{ "value": "Runtime.Web.Auth.AuthBackend::checkAuthMiddlewareApi" }
static class LayerCrud extends CrudApi
{
	
	/**
	 * Returns orm class name
	 */
	pure string getORM() => classof Layer;
	
	
	
	/**
	 * Returns current rules
	 */
	Collection<Rule> rules() =>
	[
		new AllowFields
		{
			"fields":
			[
				"layer_id",
				"layer_uid",
				"layer_name",
				"space_id",
				"service_id",
				"route",
				"domain_name",
				"space_name",
			]
		},
		new DefaultValue{ "api_name": "route", "value": "/" },
		new ReadOnly{ "api_name": "layer_id" },
		new ReadOnly{ "api_name": "domain_name" },
		new ReadOnly{ "api_name": "space_name" },
		new Required{ "api_name": "route" },
		new Required{ "api_name": "space_id" },
		new Required{ "api_name": "service_id" },
		
		/* Add services dictionary */
		new Dictionary
		{
			"name": "services",
			"class_name": classof Service,
			"fields":
			[
				"service_id",
				"docker_name",
				"software_api_name",
			],
		},
		
		/* Add spaces dictionary */
		new Dictionary
		{
			"name": "spaces",
			"class_name": classof Space,
			"fields":
			[
				"space_id",
				"domain_name",
				"space_name",
			],
		},
	];
	
	
	
	/**
	 * Returns table field value
	 */
	Collection<Collection<string>> getDefaultOrder() =>
	[ 
		["spaces.domain_name", "asc"],
		["layers.route", "asc"],
	];
	
	
	
	/**
	 * Build query
	 */
	QueryBuilder buildSearchQuery(QueryBuilder q) =>
		parent::buildSearchQuery(q)
		|> .fields(["layers.*", "spaces.domain_name", "spaces.space_name"])
		|> .alias("layers")
		|> .leftJoin(Space::table_name(), "spaces", "spaces.space_id = layers.space_id")
	;
	
	
	
	/**
	 * Convert item before save to database
	 */
	async Dict convertItem(Dict item)
	{
		/* Convert item */
		item = await parent::convertItem(item);
		
		string layer_uid = item["layer_uid"];
		string space_id = item["space_id"];
		string service_id = item["service_id"];
		if (rtl::isEmpty(layer_uid))
		{
			Space space = Space::getById(space_id);
			int count = Layer::select()
				|> .orm("")
				|> .fields(["count(*) as c"])
				|> .filter([
					["space_id", "=", space_id],
					["service_id", "=", service_id],
				])
				|> await .one()
				|> attr "c"
				|> default int 0
			;
			
			if (space != null and space.domain_name != "")
			{
				layer_uid = space.domain_name ~ ":layer_" ~ count;
				item <= layer_uid <= layer_uid;
			}
			else
			{
				layer_uid = rtl::time_uid();
				item <= layer_uid <= layer_uid;
			}
		}
		
		/* Save default route for Cloud OS Layer */
		if (layer_uid == "00000000-0000-0000-0000-000000000000")
		{
			item <= route <= "/";
		}
		
		return item;
	}
	
	
	
	/**
	 * Init request
	 */
	async void init()
	{
		await parent::init();
	}
	
	
	
	/**
	 * Validate
	 */
	async void validate()
	{
		await parent::validate();
	}
	
	
	
	/**
	 * After
	 */
	async void after()
	{
		await parent::after();
		
		/* If is success */
		if (this.isSuccess() and this.isModify())
		{
			string old_space_id = this.old_item["space_id"];
			string new_space_id = this.new_item["space_id"];
			
			Space old_space = await Space::getById(old_space_id);
			Space new_space = await Space::getById(new_space_id);
			
			string old_domain_name = old_space["domain_name"];
			string new_domain_name = new_space["domain_name"];
			
			await Domain::updateNginx(old_domain_name);
			if (new_domain_name != old_domain_name) await Domain::updateNginx(new_domain_name);
		}
	}
	
	
	
	/**
	 * Search api
	 */
	@ApiMethod{ "method_name": "search" }
	static async list searchAction(RemoteCallRequest request, RemoteCallAnswer answer)
	{
		return await parent::searchAction(request, answer);
	}
	
	
	
	/**
	 * Create
	 */
	@ApiMethod{ "method_name": "create" }
	static async list createAction(RemoteCallRequest request, RemoteCallAnswer answer)
	{
		return await parent::createAction(request, answer);
	}
	
	
	
	/**
	 * Update
	 */
	@ApiMethod{ "method_name": "update" }
	static async list updateAction(RemoteCallRequest request, RemoteCallAnswer answer)
	{
		return await parent::updateAction(request, answer);
	}
	
	
	
	/**
	 * Delete
	 */
	@ApiMethod{ "method_name": "delete" }
	static async list deleteAction(RemoteCallRequest request, RemoteCallAnswer answer)
	{
		return await parent::deleteAction(request, answer);
	}
	
}