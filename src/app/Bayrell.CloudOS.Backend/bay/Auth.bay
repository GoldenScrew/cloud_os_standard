/*!
 *  Bayrell Cloud OS
 *
 *  (c) Copyright 2020 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Bayrell.CloudOS.Backend;

use Runtime.Web.RenderContainer;
use Runtime.Web.Auth.AuthToken;
use Bayrell.CloudOS.Backend.ORM.User;


static class Auth
{
	
	/**
	 * Save Auth Token in keep data
	 */
	static list createAuthToken(RenderContainer container)
	{
		int time = rtl::time();
		
		/* Create token */
		AuthToken token = new AuthToken
		{
			"user_id": 35,
			"login": "admin",
		}
		
		/* Set auth token */
		container <= layout <= tz <= "GMT+6";
		container <= layout <= keep_data <= { classof AuthToken } <= token;
		container <= api_storage <= { classof AuthToken } <= token;
		
		return [ container ];
	}
	
	
	
	/**
	 * Check system api
	 */
	static async RenderContainer checkSystemApi(RemoteCallRequest request, RemoteCallAnswer answer)
	{
		return [ request, answer ];
	}
	
	
	
	/**
	 * Login
	 */
	async list chainLogin(string username, string password, AuthToken token)
	{
		if (token != null) return [ username, password, token ];
		
		/* Find user */
		User user = User::select()
			|> .filter
			([
				["login", "=", username]
			])
			|> await .one()
		;
		
		if (user == null) return [ username, password, token ];
		if (user.banned) return [ username, password, token ];
		
		/* Check password */
		bool check_password = await User::checkPassword(user.user_id, password);
		if (not check_password) return [ username, password, token ];
		
		/* Create token */
		int cookie_expire = @.config(["Runtime.Web.Auth", "COOKIE_EXPIRE"]) |> default int 3600;
		int time = rtl::time();
		token = new AuthToken
		{
			"created": time,
			"expire": time + cookie_expire,
			"user_id": user.user_id,
			"login": username,
		}
		
		return [ username, password, token ];
	}
	
	
	
	/**
	 * Logout
	 */
	async list chainLogout(AuthToken token)
	{
		return [ token ];
	}
	
	
	
	/**
	 * Check token
	 */
	async list chainCheckToken(AuthToken token)
	{
		return [ token ];
	}
	
}