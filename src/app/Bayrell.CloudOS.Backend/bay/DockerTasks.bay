/*!
 *  Bayrell Cloud OS
 *
 *  (c) Copyright 2020 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Bayrell.CloudOS.Backend;

use Runtime.lib;
use Runtime.RuntimeUtils;
use Runtime.Task.CronTask;
use Runtime.Task.CronTimer;
use Runtime.Task.TaskList;
use Runtime.Task.TaskMethod;
use Runtime.Task.TaskDriver;
use Runtime.ORM.ConnectionInterface as Connection;
use Runtime.ORM.CursorInterface as Cursor;
use Runtime.ORM.DriverInterface as ORMDriver;
use Bayrell.CloudOS.Backend.ORM.Domain;
use Bayrell.CloudOS.Backend.ORM.Layer;
use Bayrell.CloudOS.Backend.ORM.Space;
use Bayrell.CloudOS.Backend.ORM.Service;
use Bayrell.CloudOS.Backend.DockerLib;


@TaskList{}
class DockerTasks
{
	
	/**
	 * Update services admin pages
	 */
	@TaskMethod{}
	static async void updateServicesAdminPages()
	{
		TaskDriver output = @.getDriver(classof TaskDriver);
		await Service::updateNginx();
		output.writeln("Ok");
	}
	
	
	
	/**
	 * Sync services
	 */
	@CronTimer{ "timer": 15 } 
	static async void syncServices()
	{
		Cursor cursor = null;
		TaskDriver output = @.getDriver(classof TaskDriver);
		
		/* Connect to database */
		Dict db_settings = {};
		string driver_name = db_settings["driver"] |> default string classof ORMDriver;
		Connection conn = @.getDriver(driver_name) |> await .connect(db_settings);
		
		int time = rtl::time();
		
		/* Get nodes */
		string s = await DockerLib::dockerApi("/nodes");
		Dict nodes = s
			|> RuntimeUtils::json_decode
			|> lib::transition( list (Dict node) => [ node, node["ID"] ] )
		;
		
		/* Get services */
		string s = await DockerLib::dockerApi("/services");
		Collection services = RuntimeUtils::json_decode(s);
		
		for (int i=0; i<services.count(); i++)
		{
			Dict json = services.item(i);
			string service_id = json.get("ID", "");
			string service_name = json |> attr "Spec", "Name" |> default string "";
			string stack_name = json |> attr "Spec", "Labels", "com.docker.stack.namespace" |> default string "";
			string service_image = json |> attr "Spec", "TaskTemplate", "ContainerSpec", "Image" |> default string "";
			string service_short_name = rs::substr(service_name, rs::Strlen(stack_name) + 1);
			
			output.writeln ("Update service " ~ service_name);
			string tasks_str = await DockerLib::dockerApi("/tasks?filters=" ~
				rs::url_encode('{"service":{"' ~ service_name ~ '":true}}'))
			;
			
			Dict tasks = RuntimeUtils::json_decode(tasks_str);
			
			/* Insert or update */
			await conn.insert_or_update
			(
				"services",
				{
					"docker_name": service_name,
				},
				{
					"stack_name": stack_name,
					"service_name": service_short_name,
					"docker_image": service_image,
					"is_deleted": 0,
					"enable": 1,
					"timestamp": time,
					"docker_json": RuntimeUtils::json_encode(json),
					"docker_tasks": tasks_str,
					"docker_balancer": RuntimeUtils::json_encode( static::getBalancerData(json, tasks, nodes) ),
				},
				db_settings
			);
		}
		
		/* Disable old services */
		cursor = await conn.query
		(
			"update services set enable=0 where timestamp != :timestamp",
			{
				"timestamp": time,
			},
			db_settings
		);
		await cursor.close();
		
		
		/* Delete old services */
		cursor = await conn.query
		(
			"delete from services where is_deleted=1 and timestamp < :timestamp",
			{
				"timestamp": time - 24*60*60,
			},
			db_settings
		)
		await cursor.close();
		
		/* Update inc/services_admin_page.inc */
		await Service::updateNginx();
	}
	
	
	
	/**
	 * Update services admin pages
	 */
	@CronTimer{ "timer": 60 }
	static async void checkSystemLayer()
	{
		TaskDriver output = @.getDriver(classof TaskDriver);
		
		string CLOUD_DOMAIN = @.env("CLOUD_DOMAIN") |> default string "";
		string CLOUD_PANEL = @.env("CLOUD_PANEL") |> default string "";
		
		/* Find service */
		Service service = Service::select()
			|> .filter([
				["docker_name", "=", CLOUD_PANEL],
				["enable", "=", 1],
				["is_deleted", "=", 0],
			])
			|> await .one()
		;
		
		if (service != null and CLOUD_DOMAIN != "" and CLOUD_PANEL != "")
		{
			
			/* Create domain if does not exists */
			Domain domain = await Domain::getById(CLOUD_DOMAIN);
			if (domain == null)
			{
				string nginx_template = "";
				nginx_template ~= "server {\n";
				nginx_template ~= "\tlisten 80;\n";
				nginx_template ~= "\tserver_name %DOMAIN_NAME%;\n";
				nginx_template ~= "\troot /usr/share/nginx/default;\n";
				nginx_template ~= "\tindex index.html;\n";
				nginx_template ~= "\tautoindex off;\n";
				nginx_template ~= "%ROUTES%\n";
				nginx_template ~= "%SSL%\n";
				nginx_template ~= "}";
				
				await Domain::save
				{
					"domain_name": CLOUD_DOMAIN,
					"nginx_template": nginx_template,
				};
				
				domain = await Domain::getById(CLOUD_DOMAIN);
				
				output.writeln ("Created domain " ~ CLOUD_DOMAIN);
			}
			
			/* Create space if does not exists */
			Space space = Space::select()
				|> .filter([["domain_name", "=", CLOUD_DOMAIN]])
				|> await .one()
			;
			if (space == null)
			{
				Dict pk = await Space::save
				{
					"space_name": CLOUD_DOMAIN,
					"domain_name": CLOUD_DOMAIN,
				};
				
				space = await Space::getByKey(pk);
				
				output.writeln ("Created space " ~ CLOUD_DOMAIN);
			}
			
			/* Create layer if does not exists */
			bool update = false;
			Layer layer = Layer::select()
				|> .filter([
					["layer_uid", "=", "00000000-0000-0000-0000-000000000000"]
				])
				|> await .one()
			;
			if (layer == null)
			{
				await Layer::save
				{
					"layer_uid": "00000000-0000-0000-0000-000000000000",
					"space_id": space.space_id,
					"service_id": service.service_id,
					"route": "/",
				};
				update = true;
			}
			else
			{
				if (layer.service_id != service.service_id)
				{
					layer <= service_id <= service.service_id;
					update = true;
				}
				if (layer.space_id != space.space_id)
				{
					layer <= space_id <= space.space_id;
					update = true;
				}
				if (layer.route != "/")
				{
					layer <= route <= "/";
					update = true;
				}
				if (update)
				{
					await Layer::save(layer);
				}
			}
			
			/* Update domain */
			if (update)
			{
				output.writeln ("Update nginx for domain " ~ CLOUD_DOMAIN);
				await Domain::updateNginx(CLOUD_DOMAIN);
			}
			
		}
	}
	
	
	
	/**
	 * Returns balancer data
	 */
	pure Dict getBalancerData(Dict json, Collection tasks, Dict nodes)
	{
		Dict res =
		{
			"State":
			{
				"Work": 0,
				"Total": 0,
			},
			"Tasks": [],
		};
		
		Collection Tasks = [];
		int total = json["Spec", "Mode", "Replicated", "Replicas"] |> default int 1;
		int work = 0;
		
		tasks = tasks.sortIm
		(
			bool (Dict a, Dict b)
			{
				int time_a = rtl::timestamp( rs::substr(a["Status", "Timestamp"], 0, 19) );
				int time_b = rtl::timestamp( rs::substr(b["Status", "Timestamp"], 0, 19) );
				return time_a < time_b;
			}
		);
		
		for (int i=0; i<tasks.count(); i++)
		{
			Dict task = tasks.item(i);
			string state = task["Status", "State"];
			string desired_state = task["DesiredState"];
			
			Dict node = nodes[task["NodeID"]];
			Dict service =
			{
				"ID": task["ID"],
				"Status": task["Status"],
				"DesiredState": task["DesiredState"],
				"Slot": task["Slot"],
				"Node": {
					"ID": task["NodeID"],
					"Hostname": node["Description", "Hostname"],
					"Status": node["Status"],
				},
				"Networks": [],
			};
			Collection NetworksAttachments = task["NetworksAttachments"];
			if (NetworksAttachments != null)
			{
				for (int j=0; j<NetworksAttachments.count(); j++)
				{
					Dict network = NetworksAttachments.item(j);
					service <= Networks <= service.Networks.pushIm
					{
						"ID": network["Network", "ID"],
						"Name": network["Network", "Spec", "Name"],
						"Addresses": network["Addresses"],
					};
				}
			}
			Tasks = Tasks.pushIm(service);
			
			if (state == "running" and desired_state == "running")
			{
				work++;
			}
		}
		
		res <= State <= Work <= work;
		res <= State <= Total <= total;
		res <= Tasks <= Tasks;
		
		return res;
	}
	
}
