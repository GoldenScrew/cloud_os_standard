/*!
 *  Bayrell Cloud OS
 *
 *  (c) Copyright 2020 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Bayrell.CloudOS.Backend.ORM;

use Runtime.fs;
use Runtime.lib;
use Runtime.ORM.Annotations.AutoIncrement;
use Runtime.ORM.Annotations.BigIntType;
use Runtime.ORM.Annotations.BooleanType;
use Runtime.ORM.Annotations.ForeignKey;
use Runtime.ORM.Annotations.Index;
use Runtime.ORM.Annotations.JsonType;
use Runtime.ORM.Annotations.Primary;
use Runtime.ORM.Annotations.StringType;
use Runtime.ORM.Annotations.TextType;
use Runtime.ORM.Annotations.Unique;
use Runtime.ORM.Annotations.Virtual;
use Runtime.ORM.ConnectionInterface as Connection;
use Runtime.ORM.CursorInterface as Cursor;
use Runtime.ORM.Record;
use Bayrell.CloudOS.Backend.ORM.NginxFile;


struct Service extends Record
{
	@AutoIncrement{}
	@BigIntType{}
	int service_id;
	
	@StringType{}
	string stack_name;
	
	@StringType{}
	string service_name;
	
	@StringType{}
	string software_api_name;
	
	@BooleanType{}
	bool have_admin_page = 0;
	
	@BigIntType{}
	int admin_port = 81;
	
	@StringType{}
	string admin_route = "/";
	
	@BooleanType{}
	bool enable;
	
	@BooleanType{}
	bool is_deleted;
	
	@StringType{}
	string docker_name;
	
	@TextType{}
	string docker_content;
	
	@JsonType{ "nullable": true }
	Dict docker_json;

	@JsonType{ "nullable": true }
	Dict docker_tasks;

	@JsonType{ "nullable": true }
	Dict docker_balancer;	
	
	
	/**
	 * Returns table name
	 */
	pure string table_name() => "services";
	
	
	
	/**
	 * Keys
	 */
	pure Collection keys() =>
	[
		new Primary
		{
			"keys": ["service_id"],
		},
		new Unique
		{
			"keys": ["stack_name", "service_name"],
		},
		new Index
		{
			"keys": ["software_api_name"],
		},
		new Index
		{
			"keys": ["have_admin_page"],
		},
	];
	
	
	
	/**
	 * Update nginx file
	 */
	static async void updateNginx(Dict db_settings = null)
	{
		string nginx_file_table_name = NginxFile::table_name();
		
		/* Connect to database */
		Connection conn = await static::connect(db_settings);
		
		/* Get items having admin page */
		Collection<Record> services = static::select()
			|> await .all(db_settings)
		;
		
		/* Update conf.d/99-upstreams.conf */
		string upstreams = services
			|> .filter
			(
				lib::and
				([
					lib::equalAttr("enable", true),
					lib::equalAttr("is_deleted", false),
					lib::equalAttrNot("docker_name", ""),
				])
			)
			|> .map
			(
				string (Record item)
				{
					string s = "";
					string service_name = item.docker_name;
					
					Collection tasks = item["docker_balancer", "Tasks"] |> default Collection [];
					for (int tasks_inc=0; tasks_inc<tasks.count(); tasks_inc++)
					{
						Dict task = tasks[tasks_inc];
						string state = task["Status", "State"] |> default string "";
						string desired_state = task["DesiredState"] |> default string "";
						if (desired_state == "running" and state == "running")
						{
							Collection networks = task["Networks"] |> default Collection [];
							for (int networks_inc=0; networks_inc<networks.count(); networks_inc++)
							{
								if (networks[networks_inc, "Name"] == "cloud_router")
								{
									Collection ip_arr = networks[networks_inc, "Addresses"]
										|> default Collection []
										|> .map
										(
											string (string ip)
											{
												Collection arr = rs::split("\\/", ip);
												return arr[0];
											}
										)
									;
									
									/* Add 80 port */
									s ~= "upstream " ~ service_name ~ ".test {\n";
									for (int ip_arr_inc=0; ip_arr_inc<ip_arr.count(); ip_arr_inc++)
									{
										string ip = ip_arr[ip_arr_inc];
										s ~= "\tserver " ~ ip ~ ";\n";
									}
									s ~= "}\n";
									
									/* If has admin page */
									if (item.have_admin_page)
									{
										int admin_port = item.admin_port;
										s ~= "upstream " ~ service_name ~ ".admin.test {\n";
										for (int ip_arr_inc=0; ip_arr_inc<ip_arr.count(); ip_arr_inc++)
										{
											string ip = ip_arr[ip_arr_inc];
											s ~= "\tserver " ~ ip ~ ":" ~ admin_port ~ ";\n";
										}
										s ~= "}\n";
									}
									
								}
							}
						}
					}
				
					return rs::trim(s);
				}
			)
			|> lib::filter( lib::equalNot("") )
			|> lib::join("\n")
		;
		
		/* Find nginx file */
		NginxFile file = await NginxFile::getById("conf.d/99-upstreams.conf", db_settings);
		if (file == null) file = new NginxFile{ "name": "conf.d/99-upstreams.conf" };
		
		/* Update nginx file */
		if (file.content != upstreams or file.is_deleted or file.enable != 1)
		{
			file <= content <= upstreams;
			file <= timestamp <= rtl::time();
			file <= enable <= true;
			file <= is_deleted <= false;
			
			/* Save file */
			await NginxFile::save(file, db_settings);
		}
		
		/* Update inc/services_admin_page.inc */
		Collection<string> locations = services
			|> .filter
			(
				lib::and
				([
					lib::equalAttr("have_admin_page", true),
					lib::equalAttr("enable", true),
					lib::equalAttr("is_deleted", false),
					lib::equalAttrNot("docker_name", ""),
				])
			)
			|> .sortIm( lib::sortAttr("docker_name", "asc") )
			|> .map
			(
				string (Record item)
				{
					string service_name = item.docker_name;
					string s = "";
					s ~= "location /admin/services/" ~ service_name ~ "/ {\n";
					s ~= "\tproxy_pass http://" ~ service_name ~ ".admin.test/;\n";
					s ~= "\tinclude proxy_params;\n";
					s ~= "\tproxy_set_header X-ROUTE-PREFIX \"/admin/services/" ~ service_name ~ "\";\n";
					s ~= "}";
					return s;
				}
			)
		;
		
		/* Find nginx file */
		NginxFile file = await NginxFile::getById("inc/services_admin_page.inc", db_settings);
		if (file == null) file = new NginxFile{ "name": "inc/services_admin_page.inc" };
		
		/* Update nginx file */
		string new_content = rs::join("\n", locations);
		if (file.content != new_content or file.is_deleted or file.enable != 1)
		{
			file <= content <= new_content;
			file <= timestamp <= rtl::time();
			file <= enable <= true;
			file <= is_deleted <= false;
			
			/* Save file */
			await NginxFile::save(file, db_settings);
		}
	}
}
