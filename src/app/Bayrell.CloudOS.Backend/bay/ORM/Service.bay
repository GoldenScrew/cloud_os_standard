/*!
 *  Bayrell Cloud OS
 *
 *  (c) Copyright 2020 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Bayrell.CloudOS.Backend.ORM;

use Runtime.fs;
use Runtime.lib;
use Runtime.ORM.Annotations.AutoIncrement;
use Runtime.ORM.Annotations.BigIntType;
use Runtime.ORM.Annotations.BooleanType;
use Runtime.ORM.Annotations.ForeignKey;
use Runtime.ORM.Annotations.Index;
use Runtime.ORM.Annotations.JsonType;
use Runtime.ORM.Annotations.Primary;
use Runtime.ORM.Annotations.StringType;
use Runtime.ORM.Annotations.TextType;
use Runtime.ORM.Annotations.Unique;
use Runtime.ORM.Annotations.Virtual;
use Runtime.ORM.ConnectionInterface as Connection;
use Runtime.ORM.CursorInterface as Cursor;
use Runtime.ORM.Record;
use Bayrell.CloudOS.Backend.ORM.NginxFile;


struct Service extends Record
{
	@AutoIncrement{}
	@BigIntType{}
	int service_id;
	
	@StringType{}
	string stack_name;
	
	@StringType{}
	string service_name;
	
	@StringType{}
	string software_api_name;
	
	@BooleanType{}
	bool have_admin_page = 0;
	
	@BooleanType{}
	bool enable;
	
	@BooleanType{}
	bool is_deleted;
	
	@StringType{}
	string docker_name;
	
	@TextType{}
	string docker_content;
	
	@JsonType{ "nullable": true }
	Dict docker_json;

	@JsonType{ "nullable": true }
	Dict docker_tasks;

	@JsonType{ "nullable": true }
	Dict docker_balancer;	
	
	
	/**
	 * Returns table name
	 */
	pure string table_name() => "services";
	
	
	
	/**
	 * Keys
	 */
	pure Collection keys() =>
	[
		new Primary
		{
			"keys": ["service_id"],
		},
		new Unique
		{
			"keys": ["stack_name", "service_name"],
		},
		new Index
		{
			"keys": ["software_api_name"],
		},
		new Index
		{
			"keys": ["have_admin_page"],
		},
	];
	
	
	
	/**
	 * Update nginx file
	 */
	static async void updateNginx(Dict db_settings = null)
	{
		string nginx_file_table_name = NginxFile::table_name();
		
		/* Connect to database */
		Connection conn = await static::connect(db_settings);
		
		/* Get items having admin page */
		Collection<Record> items = static::select()
			|> .filter([ ["have_admin_page", "=", true] ])
			|> await .all(db_settings)
		;
		
		Collection<string> locations = items
			|> .filter( lib::equalAttrNot("service_name", "") )
			|> .sortIm( lib::sortDesc )
			|> .map
			(
				string (Record item)
				{
					string service_name = item.docker_name;
					string s = "";
					s ~= "location /admin/services/" ~ service_name ~ "/ {\n";
					s ~= "\tproxy_pass http://" ~ service_name ~ ".admin.test/;\n";
					s ~= "\tinclude proxy_params;\n";
					s ~= "\tproxy_set_header X-ROUTE-PREFIX \"/admin/services/" ~ service_name ~ "\";\n";
					s ~= "}";
					return s;
				}
			)
		;
		
		/* Find nginx file */
		NginxFile file = await NginxFile::getById("inc/services_admin_page.inc", db_settings);
		if (file == null) file = new NginxFile
		{
			"name": "inc/services_admin_page.inc"
		};
		
		/* Update nginx file */
		string new_content = rs::join("\n", locations);
		if (file.content != new_content or file.is_deleted or file.enable != 1)
		{
			file <= content <= new_content;
			file <= timestamp <= rtl::time();
			file <= enable <= true;
			file <= is_deleted <= false;
			
			/* Save file */
			await NginxFile::save(file, db_settings);
		}
	}
}
