/*!
 *  Bayrell Cloud OS
 *
 *  (c) Copyright 2020 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Bayrell.CloudOS.Backend.ORM;

use Runtime.lib;
use Runtime.ORM.Annotations.AutoIncrement;
use Runtime.ORM.Annotations.BigIntType;
use Runtime.ORM.Annotations.BooleanType;
use Runtime.ORM.Annotations.ForeignKey;
use Runtime.ORM.Annotations.Index;
use Runtime.ORM.Annotations.JsonType;
use Runtime.ORM.Annotations.Primary;
use Runtime.ORM.Annotations.StringType;
use Runtime.ORM.Annotations.TextType;
use Runtime.ORM.Annotations.Unique;
use Runtime.ORM.Annotations.Virtual;
use Runtime.ORM.ConnectionInterface as Connection;
use Runtime.ORM.CursorInterface as Cursor;
use Runtime.ORM.DriverInterface as ORMDriver;
use Runtime.ORM.QueryBuilder;
use Runtime.ORM.Record;
use Bayrell.CloudOS.Backend.ORM.Layer;
use Bayrell.CloudOS.Backend.ORM.LayerSpace;
use Bayrell.CloudOS.Backend.ORM.NginxFile;
use Bayrell.CloudOS.Backend.ORM.Service;
use Bayrell.CloudOS.Backend.ORM.Software;


struct VirtualSpace extends Record
{
	@AutoIncrement{}
	@BigIntType{}
	int space_id;
	
	@StringType{ "length": 255 }
	string name;
	
	@StringType{ "length": 1024 }
	string domain;
	
	@TextType{}
	string nginx_template;
	
	@BigIntType{}
	int logic_map_pos_y = 0;
	
	
	
	/**
	 * Returns table name
	 */
	pure string table_name() => "virtual_spaces";
	
	
	
	/**
	 * Keys
	 */
	pure Collection keys() =>
	[
		new Primary
		{
			"keys": ["space_id"],
		},
		new Unique
		{
			"keys": ["domain"],
		},
	];
	
	
	
	/**
	 * Process item to database
	 */
	static async Dict toDatabase(Dict item)
	{
		item = await parent::toDatabase(item);
		
		/* Set default template */
		string nginx_template = item["nginx_template"] |> default string "";
		if (nginx_template == "")
		{
			nginx_template = "";
			nginx_template ~= "server {\n";
			nginx_template ~= "\tlisten 80;\n";
			nginx_template ~= "\tserver_name %SERVER_NAME%;\n";
			nginx_template ~= "\troot /usr/share/nginx/default;\n";
			nginx_template ~= "\tindex index.html;\n";
			nginx_template ~= "\tautoindex off;\n";
			nginx_template ~= "%LAYERS%\n";
			nginx_template ~= "%SSL%\n";
			nginx_template ~= "}";
			item <= nginx_template <= nginx_template;
		}
		
		return item;
	}
	
	
	
	/**
	 * Get layer
	 */
	pure string getLayer(VirtualSpace space, Dict item)
	{
		string domain = space.domain;
		string uri = item["uri"] |> default string "";
		string stack_name = item["stack_name"] |> default string "";
		string service_name = item["service_name"] |> default string "";
		string layer_id = item["layer_id"] |> default string "";
		string layer_uid = item["layer_uid"] |> default string "";
		
		if (uri == "") return "";
		if (stack_name == "") return "";
		if (service_name == "") return "";
		
		string res = "";
		res ~= "\tlocation " ~ uri ~ " {\n";
		res ~= "\t\tproxy_pass http://" ~ stack_name ~ "_" ~ service_name ~ ".test/;\n";
		res ~= "\t\tinclude proxy_params;\n";
		res ~= "\t\tproxy_set_header X-ROUTE-PREFIX \"" ~ uri ~ "\";\n";
		if (space.space_id) res ~= "\t\tproxy_set_header X-SPACE-ID \"" ~ space.space_id ~ "\";\n";
		if (layer_id) res ~= "\t\tproxy_set_header X-LAYER-ID \"" ~ layer_id ~ "\";\n";
		if (layer_uid) res ~= "\t\tproxy_set_header X-LAYER-UID \"" ~ layer_uid ~ "\";\n";
		res ~= "\t}";
		
		return res;
	}
	
	
	
	/**
	 * Update nginx
	 */
	static async void updateNginx(int space_id, Dict db_settings = null)
	{
		/* Connect to database */
		Connection conn = await static::connect(db_settings);
		
		/* Get table names */
		string spaces_table_name = VirtualSpace::table_name();
		string layers_table_name = Layer::table_name();
		string layers_spaces_table_name = LayerSpace::table_name();
		string services_table_name = Service::table_name();
		string softwares_table_name = Software::table_name();
		string nginx_file_table_name = NginxFile::table_name();
		
		VirtualSpace space = await VirtualSpace::getById(space_id, db_settings);
		if (space == null)
		{
			return;
		}
		
		fn getLayer = curry static::getLayer(space, ?);
		
		/* Get layers */
		Collection layers = new QueryBuilder()
			
			/* Query */
			|> .select(layers_spaces_table_name, "layers_spaces")
			|> .fields
			([
				"layers.layer_id as layer_id",
				"layers.uid as layer_uid",
				"layers_spaces.uri as uri",
				"services.stack_name as stack_name",
				"services.service_name as service_name",
			])
			|> .leftJoin(layers_table_name, "layers", "layers_spaces.layer_id = layers.layer_id")
			|> .leftJoin(services_table_name, "services", "layers.service_id = services.service_id")
			|> .filter
			([
				["layers_spaces.space_id", "=", space_id]
			])
			
			/* Get items from database by query */
			|> await .all()
			
			/* Sort by URI */
			|> .sortIm( lib::sortAttr("uri", "desc") )
			
			/* Convert items to layer */
			|> .map( getLayer )
			
			/* Remove empty strings */
			|> .filter( lib::equalNot("") )
		;
		
		/* Create nginx files */
		string nginx_content = space.nginx_template;
		
		nginx_content = rs::replace("%SERVER_NAME%", space.domain, nginx_content);
		nginx_content = rs::replace("%LAYERS%", rs::join("\n", layers), nginx_content);
		nginx_content = rs::replace("%SSL%", "", nginx_content);
		
		/* Update nginx file */
		await conn.insert_or_update
		(
			nginx_file_table_name,
			{
				"name": "spaces/" ~ space_id ~ ".conf",
			},
			{
				"content": nginx_content,
				"enable": 1,
				"timestamp": rtl::time(),
			}
		);
	}
}
