/*!
 *  Bayrell Cloud OS
 *
 *  (c) Copyright 2020 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Bayrell.CloudOS.Backend.ORM;

use Runtime.ORM.Annotations.AutoIncrement;
use Runtime.ORM.Annotations.BigIntType;
use Runtime.ORM.Annotations.BooleanType;
use Runtime.ORM.Annotations.ForeignKey;
use Runtime.ORM.Annotations.Index;
use Runtime.ORM.Annotations.JsonType;
use Runtime.ORM.Annotations.Primary;
use Runtime.ORM.Annotations.StringType;
use Runtime.ORM.Annotations.Unique;
use Runtime.ORM.Annotations.Virtual;
use Runtime.ORM.ConnectionInterface as Connection;
use Runtime.ORM.CursorInterface as Cursor;
use Runtime.ORM.DriverInterface as ORMDriver;
use Runtime.ORM.Record;
use Bayrell.CloudOS.Backend.ORM.Layer;
use Bayrell.CloudOS.Backend.ORM.LayerSpace;
use Bayrell.CloudOS.Backend.ORM.NginxFile;
use Bayrell.CloudOS.Backend.ORM.Software;


struct VirtualSpace extends Record
{
	@AutoIncrement{}
	@BigIntType{}
	int space_id;
	
	@StringType{ "length": 255 }
	string name;
	
	@StringType{ "length": 1024 }
	string domain;
	
	
	/**
	 * Returns table name
	 */
	pure string table_name() => "virtual_spaces";
	
	
	/**
	 * Keys
	 */
	pure Collection keys() =>
	[
		new Primary
		{
			"keys": ["space_id"],
		},
		new Unique
		{
			"keys": ["domain"],
		},
	];
	
	
	/**
	 * Update nginx
	 */
	static async void updateNginx(int space_id, Dict db_settings = null)
	{
		/* Connect to database */
		Connection conn = await static::connect(db_settings);
		
		/* Get table names */
		string spaces_table_name = VirtualSpace::table_name();
		string layers_table_name = Layer::table_name();
		string layers_spaces_table_name = LayerSpace::table_name();
		string softwares_table_name = Software::table_name();
		string nginx_file_table_name = NginxFile::table_name();
		
		VirtualSpace space = await VirtualSpace::getById(space_id, db_settings);
		if (space == null)
		{
			return;
		}
		
		/* Get items */
		string sql = "select spaces.domain, layers_spaces.uri, softwares.backend from "~spaces_table_name~
			" as spaces\n"~
			"left join "~layers_spaces_table_name~" as layers_spaces on (layers_spaces.space_id = spaces.space_id)\n" ~
			"left join "~layers_table_name~" as layers on (layers_spaces.layer_id = layers.layer_id)\n" ~
			"left join "~softwares_table_name~" as softwares on (layers.software_api_name = softwares.api_name)\n" ~
			"where spaces.space_id=:space_id";
		
		Cursor cursor = await conn.query
		(
			sql,
			{
				"space_id": space_id,
			},
			db_settings
		);
		Collection items = await cursor.fetchAll();
		await cursor.close();
		
		/* Create nginx files */
		string nginx_content = "";
		if (items.count() > 0)
		{
			string domain = space.domain;
			nginx_content ~= "server {\n";
			nginx_content ~= "\tlisten 80;\n";
			nginx_content ~= "\tserver_name " ~ domain ~ ";\n";
			nginx_content ~= "\troot /usr/share/nginx/default;\n";
			nginx_content ~= "\tindex index.html;\n";
			nginx_content ~= "\tautoindex off;\n";
			for (int i=0; i<items.count(); i++)
			{
				Dict item = items[i];
				string uri = item["uri"];
				string backend = item["backend"];
				if (rtl::isEmpty(uri) or rtl::isEmpty(backend))
				{
					continue;
				}
				nginx_content ~= "\tlocation " ~ uri ~ " {\n";
				nginx_content ~= "\t\tproxy_pass http://" ~ backend ~ ".test/;\n";
				nginx_content ~= "\t\tinclude proxy_params;\n";
				nginx_content ~= "\t}\n";
			}
			nginx_content ~= "}";
			
			/* Update nginx file */
			await conn.insert_or_update
			(
				nginx_file_table_name,
				{
					"name": "spaces/" ~ space_id ~ ".conf",
				},
				{
					"content": nginx_content,
					"enable": 1,
					"timestamp": rtl::time(),
				}
			);
		}
	}
}
